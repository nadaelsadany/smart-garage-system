
Second_Term_Project.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001928  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08001a58  08001a58  00011a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b68  08001b68  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b68  08001b68  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b68  08001b68  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b68  08001b68  00011b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b6c  08001b6c  00011b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000002c  08001b9c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001b9c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000862f  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000145c  00000000  00000000  00028684  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000017b4  00000000  00000000  00029ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000003a8  00000000  00000000  0002b298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000300  00000000  00000000  0002b640  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000015dd  00000000  00000000  0002b940  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004215  00000000  00000000  0002cf1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000caf4  00000000  00000000  00031132  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003dc26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c0c  00000000  00000000  0003dca4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001a40 	.word	0x08001a40

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08001a40 	.word	0x08001a40

08000170 <keypad_Init>:

#include "Keypad.h"


void keypad_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	GPIO_PIN_Configer_t PinCinfg;

	PinCinfg.GPIO_PinNumber=GPIO_PIN_0;
 8000176:	2301      	movs	r3, #1
 8000178:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800017a:	2304      	movs	r3, #4
 800017c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	4619      	mov	r1, r3
 8000182:	4821      	ldr	r0, [pc, #132]	; (8000208 <keypad_Init+0x98>)
 8000184:	f001 f84d 	bl	8001222 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PinNumber=GPIO_PIN_1;
 8000188:	2302      	movs	r3, #2
 800018a:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800018c:	2302      	movs	r3, #2
 800018e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	4619      	mov	r1, r3
 8000194:	481c      	ldr	r0, [pc, #112]	; (8000208 <keypad_Init+0x98>)
 8000196:	f001 f844 	bl	8001222 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PinNumber=GPIO_PIN_3;
 800019a:	2308      	movs	r3, #8
 800019c:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800019e:	2302      	movs	r3, #2
 80001a0:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	4619      	mov	r1, r3
 80001a6:	4818      	ldr	r0, [pc, #96]	; (8000208 <keypad_Init+0x98>)
 80001a8:	f001 f83b 	bl	8001222 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PinNumber=GPIO_PIN_4;
 80001ac:	2310      	movs	r3, #16
 80001ae:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80001b0:	2302      	movs	r3, #2
 80001b2:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	4619      	mov	r1, r3
 80001b8:	4813      	ldr	r0, [pc, #76]	; (8000208 <keypad_Init+0x98>)
 80001ba:	f001 f832 	bl	8001222 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PinNumber=GPIO_PIN_5;
 80001be:	2320      	movs	r3, #32
 80001c0:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001c2:	2304      	movs	r3, #4
 80001c4:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 80001c6:	2301      	movs	r3, #1
 80001c8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	4619      	mov	r1, r3
 80001ce:	480e      	ldr	r0, [pc, #56]	; (8000208 <keypad_Init+0x98>)
 80001d0:	f001 f827 	bl	8001222 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PinNumber=GPIO_PIN_6;
 80001d4:	2340      	movs	r3, #64	; 0x40
 80001d6:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d8:	2304      	movs	r3, #4
 80001da:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 80001dc:	2301      	movs	r3, #1
 80001de:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	4619      	mov	r1, r3
 80001e4:	4808      	ldr	r0, [pc, #32]	; (8000208 <keypad_Init+0x98>)
 80001e6:	f001 f81c 	bl	8001222 <MCAL_GPIO_Init>

	PinCinfg.GPIO_PinNumber=GPIO_PIN_7;
 80001ea:	2380      	movs	r3, #128	; 0x80
 80001ec:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ee:	2304      	movs	r3, #4
 80001f0:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 80001f2:	2301      	movs	r3, #1
 80001f4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4619      	mov	r1, r3
 80001fa:	4803      	ldr	r0, [pc, #12]	; (8000208 <keypad_Init+0x98>)
 80001fc:	f001 f811 	bl	8001222 <MCAL_GPIO_Init>

}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40010c00 	.word	0x40010c00

0800020c <keypad_Read>:

char keypad_Read(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePort(GPIOB, 0x0020);// Make Pin B5 High
 8000210:	2120      	movs	r1, #32
 8000212:	4843      	ldr	r0, [pc, #268]	; (8000320 <keypad_Read+0x114>)
 8000214:	f001 f8c7 	bl	80013a6 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '*';
 8000218:	4841      	ldr	r0, [pc, #260]	; (8000320 <keypad_Read+0x114>)
 800021a:	f001 f897 	bl	800134c <MCAL_GPIO_ReadPort>
 800021e:	4603      	mov	r3, r0
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <keypad_Read+0x20>
 8000228:	232a      	movs	r3, #42	; 0x2a
 800022a:	e076      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '7';
 800022c:	483c      	ldr	r0, [pc, #240]	; (8000320 <keypad_Read+0x114>)
 800022e:	f001 f88d 	bl	800134c <MCAL_GPIO_ReadPort>
 8000232:	4603      	mov	r3, r0
 8000234:	f003 0302 	and.w	r3, r3, #2
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <keypad_Read+0x34>
 800023c:	2337      	movs	r3, #55	; 0x37
 800023e:	e06c      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '4';
 8000240:	4837      	ldr	r0, [pc, #220]	; (8000320 <keypad_Read+0x114>)
 8000242:	f001 f883 	bl	800134c <MCAL_GPIO_ReadPort>
 8000246:	4603      	mov	r3, r0
 8000248:	f003 0308 	and.w	r3, r3, #8
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <keypad_Read+0x48>
 8000250:	2334      	movs	r3, #52	; 0x34
 8000252:	e062      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '1';
 8000254:	4832      	ldr	r0, [pc, #200]	; (8000320 <keypad_Read+0x114>)
 8000256:	f001 f879 	bl	800134c <MCAL_GPIO_ReadPort>
 800025a:	4603      	mov	r3, r0
 800025c:	f003 0310 	and.w	r3, r3, #16
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <keypad_Read+0x5c>
 8000264:	2331      	movs	r3, #49	; 0x31
 8000266:	e058      	b.n	800031a <keypad_Read+0x10e>


	MCAL_GPIO_WritePort(GPIOB, 0x0040); // Make Pin B6 High
 8000268:	2140      	movs	r1, #64	; 0x40
 800026a:	482d      	ldr	r0, [pc, #180]	; (8000320 <keypad_Read+0x114>)
 800026c:	f001 f89b 	bl	80013a6 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '0';
 8000270:	482b      	ldr	r0, [pc, #172]	; (8000320 <keypad_Read+0x114>)
 8000272:	f001 f86b 	bl	800134c <MCAL_GPIO_ReadPort>
 8000276:	4603      	mov	r3, r0
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <keypad_Read+0x78>
 8000280:	2330      	movs	r3, #48	; 0x30
 8000282:	e04a      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '8';
 8000284:	4826      	ldr	r0, [pc, #152]	; (8000320 <keypad_Read+0x114>)
 8000286:	f001 f861 	bl	800134c <MCAL_GPIO_ReadPort>
 800028a:	4603      	mov	r3, r0
 800028c:	f003 0302 	and.w	r3, r3, #2
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <keypad_Read+0x8c>
 8000294:	2338      	movs	r3, #56	; 0x38
 8000296:	e040      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '5';
 8000298:	4821      	ldr	r0, [pc, #132]	; (8000320 <keypad_Read+0x114>)
 800029a:	f001 f857 	bl	800134c <MCAL_GPIO_ReadPort>
 800029e:	4603      	mov	r3, r0
 80002a0:	f003 0308 	and.w	r3, r3, #8
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <keypad_Read+0xa0>
 80002a8:	2335      	movs	r3, #53	; 0x35
 80002aa:	e036      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '2';
 80002ac:	481c      	ldr	r0, [pc, #112]	; (8000320 <keypad_Read+0x114>)
 80002ae:	f001 f84d 	bl	800134c <MCAL_GPIO_ReadPort>
 80002b2:	4603      	mov	r3, r0
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <keypad_Read+0xb4>
 80002bc:	2332      	movs	r3, #50	; 0x32
 80002be:	e02c      	b.n	800031a <keypad_Read+0x10e>

	MCAL_GPIO_WritePort(GPIOB, 0x0080); // Make Pin B7 High
 80002c0:	2180      	movs	r1, #128	; 0x80
 80002c2:	4817      	ldr	r0, [pc, #92]	; (8000320 <keypad_Read+0x114>)
 80002c4:	f001 f86f 	bl	80013a6 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '#';
 80002c8:	4815      	ldr	r0, [pc, #84]	; (8000320 <keypad_Read+0x114>)
 80002ca:	f001 f83f 	bl	800134c <MCAL_GPIO_ReadPort>
 80002ce:	4603      	mov	r3, r0
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <keypad_Read+0xd0>
 80002d8:	2323      	movs	r3, #35	; 0x23
 80002da:	e01e      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '9';
 80002dc:	4810      	ldr	r0, [pc, #64]	; (8000320 <keypad_Read+0x114>)
 80002de:	f001 f835 	bl	800134c <MCAL_GPIO_ReadPort>
 80002e2:	4603      	mov	r3, r0
 80002e4:	f003 0302 	and.w	r3, r3, #2
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <keypad_Read+0xe4>
 80002ec:	2339      	movs	r3, #57	; 0x39
 80002ee:	e014      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '6';
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <keypad_Read+0x114>)
 80002f2:	f001 f82b 	bl	800134c <MCAL_GPIO_ReadPort>
 80002f6:	4603      	mov	r3, r0
 80002f8:	f003 0308 	and.w	r3, r3, #8
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <keypad_Read+0xf8>
 8000300:	2336      	movs	r3, #54	; 0x36
 8000302:	e00a      	b.n	800031a <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '3';
 8000304:	4806      	ldr	r0, [pc, #24]	; (8000320 <keypad_Read+0x114>)
 8000306:	f001 f821 	bl	800134c <MCAL_GPIO_ReadPort>
 800030a:	4603      	mov	r3, r0
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <keypad_Read+0x10c>
 8000314:	2333      	movs	r3, #51	; 0x33
 8000316:	e000      	b.n	800031a <keypad_Read+0x10e>


	return 'N';
 8000318:	234e      	movs	r3, #78	; 0x4e
}
 800031a:	4618      	mov	r0, r3
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010c00 	.word	0x40010c00

08000324 <Servo1_Entry_Gate_Init>:
#define Down 2


//B8 SERVO1
void Servo1_Entry_Gate_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 1*/
	GPIO_PIN_Configer_t PinCinfg;
	PinCinfg.GPIO_PinNumber = GPIO_PIN_8 ;
 800032a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032e:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000330:	2304      	movs	r3, #4
 8000332:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 8000334:	2301      	movs	r3, #1
 8000336:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4619      	mov	r1, r3
 800033c:	4803      	ldr	r0, [pc, #12]	; (800034c <Servo1_Entry_Gate_Init+0x28>)
 800033e:	f000 ff70 	bl	8001222 <MCAL_GPIO_Init>
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40010c00 	.word	0x40010c00

08000350 <Servo1_Entry_Gate>:

//Direction Up or Down
void Servo1_Entry_Gate(uint8_t Direction)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d10f      	bne.n	8000380 <Servo1_Entry_Gate+0x30>
	{
		//servo1 Enter gate up +90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000366:	4812      	ldr	r0, [pc, #72]	; (80003b0 <Servo1_Entry_Gate+0x60>)
 8000368:	f000 ffff 	bl	800136a <MCAL_GPIO_WritePin>
		dus(500);
 800036c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000370:	f001 f8de 	bl	8001530 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037a:	480d      	ldr	r0, [pc, #52]	; (80003b0 <Servo1_Entry_Gate+0x60>)
 800037c:	f000 fff5 	bl	800136a <MCAL_GPIO_WritePin>
	}
	if(Direction==Down)
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	2b02      	cmp	r3, #2
 8000384:	d10f      	bne.n	80003a6 <Servo1_Entry_Gate+0x56>
	{
		//servo1 Enter gate down -90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000386:	2201      	movs	r2, #1
 8000388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038c:	4808      	ldr	r0, [pc, #32]	; (80003b0 <Servo1_Entry_Gate+0x60>)
 800038e:	f000 ffec 	bl	800136a <MCAL_GPIO_WritePin>
		dus(1488);
 8000392:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8000396:	f001 f8cb 	bl	8001530 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	4803      	ldr	r0, [pc, #12]	; (80003b0 <Servo1_Entry_Gate+0x60>)
 80003a2:	f000 ffe2 	bl	800136a <MCAL_GPIO_WritePin>
	}


}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40010c00 	.word	0x40010c00

080003b4 <Servo2_Exit_Gate_Init>:

//B9 SERVO2
void Servo2_Exit_Gate_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 2*/
	GPIO_PIN_Configer_t PinCinfg;
	PinCinfg.GPIO_PinNumber =GPIO_PIN_9;
 80003ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003be:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003c0:	2304      	movs	r3, #4
 80003c2:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 80003c4:	2301      	movs	r3, #1
 80003c6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	4619      	mov	r1, r3
 80003cc:	4803      	ldr	r0, [pc, #12]	; (80003dc <Servo2_Exit_Gate_Init+0x28>)
 80003ce:	f000 ff28 	bl	8001222 <MCAL_GPIO_Init>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40010c00 	.word	0x40010c00

080003e0 <Servo2_Exit_Gate>:

//Direction Up or Down
void Servo2_Exit_Gate(uint8_t Direction)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d10f      	bne.n	8000410 <Servo2_Exit_Gate+0x30>
	{
		//servo2 Exit gate up +90
		GPIO_PIN_Configer_t PinCinfg;
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f6:	4812      	ldr	r0, [pc, #72]	; (8000440 <Servo2_Exit_Gate+0x60>)
 80003f8:	f000 ffb7 	bl	800136a <MCAL_GPIO_WritePin>
		dus(500);
 80003fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000400:	f001 f896 	bl	8001530 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800040a:	480d      	ldr	r0, [pc, #52]	; (8000440 <Servo2_Exit_Gate+0x60>)
 800040c:	f000 ffad 	bl	800136a <MCAL_GPIO_WritePin>
	}

	if(Direction == Down)
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	2b02      	cmp	r3, #2
 8000414:	d10f      	bne.n	8000436 <Servo2_Exit_Gate+0x56>
	{
		//servo2 Exit gate down -90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800041c:	4808      	ldr	r0, [pc, #32]	; (8000440 <Servo2_Exit_Gate+0x60>)
 800041e:	f000 ffa4 	bl	800136a <MCAL_GPIO_WritePin>
		dus(1488);
 8000422:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8000426:	f001 f883 	bl	8001530 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000430:	4803      	ldr	r0, [pc, #12]	; (8000440 <Servo2_Exit_Gate+0x60>)
 8000432:	f000 ff9a 	bl	800136a <MCAL_GPIO_WritePin>
	}

}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40010c00 	.word	0x40010c00

08000444 <LCD_delay>:
#define FUNCTION_SET			0x20
#define SET_CG_ADDRESS			0x40
#define SET_DD_ADDRESS			0x80


static void LCD_delay(int ms){
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	volatile uint32_t counter =0;
 800044c:	2300      	movs	r3, #0
 800044e:	60bb      	str	r3, [r7, #8]
	for(int i =0;i<ms;i++){
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	e00a      	b.n	800046c <LCD_delay+0x28>
		for(;counter<1500;counter++);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	3301      	adds	r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000462:	4293      	cmp	r3, r2
 8000464:	d9f7      	bls.n	8000456 <LCD_delay+0x12>
	for(int i =0;i<ms;i++){
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	3301      	adds	r3, #1
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fa      	ldr	r2, [r7, #12]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	dbf3      	blt.n	800045c <LCD_delay+0x18>
	}
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <LCD_kick>:
//void MCAL_GPIO_WritePin(GPIO_TypeDef * GPIOx,uint16_t PinNumber,uint8_t Vlaue);

void LCD_kick(s_LCD_Config_t  * LCD){
 800047e:	b580      	push	{r7, lr}
 8000480:	b082      	sub	sp, #8
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
	//BITSET(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.enpin);									//enable pulse
	MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.enpin,GPIO_PIN_TRUE);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6818      	ldr	r0, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	88db      	ldrh	r3, [r3, #6]
 800048e:	2201      	movs	r2, #1
 8000490:	4619      	mov	r1, r3
 8000492:	f000 ff6a 	bl	800136a <MCAL_GPIO_WritePin>
	LCD_delay(1);
 8000496:	2001      	movs	r0, #1
 8000498:	f7ff ffd4 	bl	8000444 <LCD_delay>
	MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.enpin,GPIO_PIN_FALSE);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	6818      	ldr	r0, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	88db      	ldrh	r3, [r3, #6]
 80004a4:	2200      	movs	r2, #0
 80004a6:	4619      	mov	r1, r3
 80004a8:	f000 ff5f 	bl	800136a <MCAL_GPIO_WritePin>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <LCD_init>:

void LCD_init(s_LCD_Config_t  *  LCD ){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	//*(LCD->s_LCDCtrlPins.p_DataDireReg) |= (1<<LCD->s_LCDCtrlPins.enpin) | (1<<LCD->s_LCDCtrlPins.rspin) | (1<<LCD->s_LCDCtrlPins.rwpin);
	GPIO_PIN_Configer_t pin = {LCD->s_LCDCtrlPins.enpin ,GPIO_MODE_OUTPUT_PP, GPIO_SPEED_10M};
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	88db      	ldrh	r3, [r3, #6]
 80004c0:	813b      	strh	r3, [r7, #8]
 80004c2:	2304      	movs	r3, #4
 80004c4:	72bb      	strb	r3, [r7, #10]
 80004c6:	2301      	movs	r3, #1
 80004c8:	72fb      	strb	r3, [r7, #11]
	MCAL_GPIO_Init(LCD->s_LCDCtrlPins.GPIOX,&pin);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f107 0208 	add.w	r2, r7, #8
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 fea4 	bl	8001222 <MCAL_GPIO_Init>
	pin.GPIO_PinNumber = LCD->s_LCDCtrlPins.rspin;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	889b      	ldrh	r3, [r3, #4]
 80004de:	813b      	strh	r3, [r7, #8]
	MCAL_GPIO_Init(LCD->s_LCDCtrlPins.GPIOX,&pin);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f107 0208 	add.w	r2, r7, #8
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 fe99 	bl	8001222 <MCAL_GPIO_Init>
	LCD->Ch_Counter = 0;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	74da      	strb	r2, [r3, #19]
	if(LCD->e_OperMode < EIGHTBIT_1LINE_7DOT)	// 4 bits
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	7c9b      	ldrb	r3, [r3, #18]
 80004fa:	2b0f      	cmp	r3, #15
 80004fc:	d819      	bhi.n	8000532 <LCD_init+0x7e>
	{
		//*(LCD->s_LCDDataPins.p_DataDireReg) |= (0x0F << LCD->s_LCDDataPins.DataPinStart);
		for(uint8_t i =0;i<4;i++){
 80004fe:	2300      	movs	r3, #0
 8000500:	73fb      	strb	r3, [r7, #15]
 8000502:	e012      	b.n	800052a <LCD_init+0x76>
			pin.GPIO_PinNumber = LCD->s_LCDDataPins.DataPinStart << i;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	899b      	ldrh	r3, [r3, #12]
 8000508:	461a      	mov	r2, r3
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	b29b      	uxth	r3, r3
 8000512:	813b      	strh	r3, [r7, #8]
			MCAL_GPIO_Init(LCD->s_LCDDataPins.GPIOX,&pin);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	f107 0208 	add.w	r2, r7, #8
 800051c:	4611      	mov	r1, r2
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fe7f 	bl	8001222 <MCAL_GPIO_Init>
		for(uint8_t i =0;i<4;i++){
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	3301      	adds	r3, #1
 8000528:	73fb      	strb	r3, [r7, #15]
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	2b03      	cmp	r3, #3
 800052e:	d9e9      	bls.n	8000504 <LCD_init+0x50>
 8000530:	e018      	b.n	8000564 <LCD_init+0xb0>
		}
	}
	else
	{
		for(uint8_t i =0;i<8;i++){
 8000532:	2300      	movs	r3, #0
 8000534:	73bb      	strb	r3, [r7, #14]
 8000536:	e012      	b.n	800055e <LCD_init+0xaa>
			pin.GPIO_PinNumber = LCD->s_LCDDataPins.DataPinStart << i;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	899b      	ldrh	r3, [r3, #12]
 800053c:	461a      	mov	r2, r3
 800053e:	7bbb      	ldrb	r3, [r7, #14]
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	b29b      	uxth	r3, r3
 8000546:	813b      	strh	r3, [r7, #8]
			MCAL_GPIO_Init(LCD->s_LCDDataPins.GPIOX,&pin);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	f107 0208 	add.w	r2, r7, #8
 8000550:	4611      	mov	r1, r2
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fe65 	bl	8001222 <MCAL_GPIO_Init>
		for(uint8_t i =0;i<8;i++){
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	3301      	adds	r3, #1
 800055c:	73bb      	strb	r3, [r7, #14]
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	2b07      	cmp	r3, #7
 8000562:	d9e9      	bls.n	8000538 <LCD_init+0x84>
		}
	}
	LCD_sendchar(LCD ,RETURN_HOME , COMMAND );
 8000564:	2200      	movs	r2, #0
 8000566:	2102      	movs	r1, #2
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f000 f82a 	bl	80005c2 <LCD_sendchar>
	LCD_sendchar(LCD ,FUNCTION_SET + LCD->e_OperMode , COMMAND );
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7c9b      	ldrb	r3, [r3, #18]
 8000572:	3320      	adds	r3, #32
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2200      	movs	r2, #0
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f821 	bl	80005c2 <LCD_sendchar>
	LCD_sendchar(LCD ,DISPLAY_CONTROL + LCD->e_DispCtrl , COMMAND );
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7c5b      	ldrb	r3, [r3, #17]
 8000584:	3308      	adds	r3, #8
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2200      	movs	r2, #0
 800058a:	4619      	mov	r1, r3
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f818 	bl	80005c2 <LCD_sendchar>
	LCD_sendchar(LCD ,ENTRY_MODE_SET + LCD->e_EntryMode , COMMAND );
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	7c1b      	ldrb	r3, [r3, #16]
 8000596:	3304      	adds	r3, #4
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2200      	movs	r2, #0
 800059c:	4619      	mov	r1, r3
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 f80f 	bl	80005c2 <LCD_sendchar>
	LCD_clearscreen(LCD);
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 f8d2 	bl	800074e <LCD_clearscreen>
	LCD_returnhome(LCD);
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f000 f8df 	bl	800076e <LCD_returnhome>
	LCD_sendchar(LCD ,SET_DD_ADDRESS , COMMAND );
 80005b0:	2200      	movs	r2, #0
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f804 	bl	80005c2 <LCD_sendchar>
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <LCD_sendchar>:
void LCD_sendchar(s_LCD_Config_t  *  LCD ,unsigned char data ,e_LCDCharType_t e_LCDCharType)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	70fb      	strb	r3, [r7, #3]
 80005ce:	4613      	mov	r3, r2
 80005d0:	70bb      	strb	r3, [r7, #2]
	LCDIsbusy(LCD);
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 f8b0 	bl	8000738 <LCDIsbusy>
	if(LCD->e_OperMode < EIGHTBIT_1LINE_7DOT)	// 4 bits
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7c9b      	ldrb	r3, [r3, #18]
 80005dc:	2b0f      	cmp	r3, #15
 80005de:	d842      	bhi.n	8000666 <LCD_sendchar+0xa4>
	{
		//void MCAL_GPIO_WriteGroup(GPIO_TypeDef * GPIOx,uint16_t Vlaue,uint16_t mask);
		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0x0F << LCD->s_LCDDataPins.DataPinStart);						// clear the data pins
		//*(LCD->s_LCDDataPins.p_PortReg) = (((data & 0xF0) >> 4) << LCD->s_LCDDataPins.DataPinStart);		//the high nibble
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6898      	ldr	r0, [r3, #8]
				,((data & 0xF0) >> 4)*LCD->s_LCDDataPins.DataPinStart
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	091b      	lsrs	r3, r3, #4
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	461a      	mov	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	899b      	ldrh	r3, [r3, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 80005f0:	fb03 f102 	mul.w	r1, r3, r2
				,0x0F*LCD->s_LCDDataPins.DataPinStart);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	899b      	ldrh	r3, [r3, #12]
 80005f8:	461a      	mov	r2, r3
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 80005fa:	4613      	mov	r3, r2
 80005fc:	011b      	lsls	r3, r3, #4
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	461a      	mov	r2, r3
 8000602:	f000 fede 	bl	80013c2 <MCAL_GPIO_WriteGroup>
		if(e_LCDCharType == COMMAND)
 8000606:	78bb      	ldrb	r3, [r7, #2]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d108      	bne.n	800061e <LCD_sendchar+0x5c>
			//BITCLEAR(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_FALSE);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	889b      	ldrh	r3, [r3, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	f000 fea7 	bl	800136a <MCAL_GPIO_WritePin>
 800061c:	e007      	b.n	800062e <LCD_sendchar+0x6c>
		else{
			//BITSET(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_TRUE);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	889b      	ldrh	r3, [r3, #4]
 8000626:	2201      	movs	r2, #1
 8000628:	4619      	mov	r1, r3
 800062a:	f000 fe9e 	bl	800136a <MCAL_GPIO_WritePin>
		}

		LCD_kick(LCD);
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ff25 	bl	800047e <LCD_kick>

		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0x0F << LCD->s_LCDDataPins.DataPinStart);
		//*(LCD->s_LCDDataPins.p_PortReg) |= ((data & 0x0F) << LCD->s_LCDDataPins.DataPinStart);
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6898      	ldr	r0, [r3, #8]
				,(data & 0x0F)*LCD->s_LCDDataPins.DataPinStart
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	8992      	ldrh	r2, [r2, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000642:	fb02 f103 	mul.w	r1, r2, r3
				,0x0F*LCD->s_LCDDataPins.DataPinStart);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	899b      	ldrh	r3, [r3, #12]
 800064a:	461a      	mov	r2, r3
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 800064c:	4613      	mov	r3, r2
 800064e:	011b      	lsls	r3, r3, #4
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	461a      	mov	r2, r3
 8000654:	f000 feb5 	bl	80013c2 <MCAL_GPIO_WriteGroup>

		LCD_kick(LCD);
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff10 	bl	800047e <LCD_kick>
		LCD_delay(1);
 800065e:	2001      	movs	r0, #1
 8000660:	f7ff fef0 	bl	8000444 <LCD_delay>
 8000664:	e026      	b.n	80006b4 <LCD_sendchar+0xf2>
	}
	else
	{						//8bit mode
		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0xFF << LCD->s_LCDDataPins.DataPinStart);
		//*(LCD->s_LCDDataPins.p_PortReg) |= (data << LCD->s_LCDDataPins.DataPinStart);
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6898      	ldr	r0, [r3, #8]
				,(data & 0xFF)*LCD->s_LCDDataPins.DataPinStart
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	8992      	ldrh	r2, [r2, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000670:	fb02 f103 	mul.w	r1, r2, r3
				,0xFF*LCD->s_LCDDataPins.DataPinStart);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	899b      	ldrh	r3, [r3, #12]
 8000678:	461a      	mov	r2, r3
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 800067a:	4613      	mov	r3, r2
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	1a9b      	subs	r3, r3, r2
 8000680:	461a      	mov	r2, r3
 8000682:	f000 fe9e 	bl	80013c2 <MCAL_GPIO_WriteGroup>
		if(e_LCDCharType == COMMAND)
 8000686:	78bb      	ldrb	r3, [r7, #2]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d108      	bne.n	800069e <LCD_sendchar+0xdc>
			//BITCLEAR(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_FALSE);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	889b      	ldrh	r3, [r3, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	4619      	mov	r1, r3
 8000698:	f000 fe67 	bl	800136a <MCAL_GPIO_WritePin>
 800069c:	e007      	b.n	80006ae <LCD_sendchar+0xec>
		else{
			//BITSET(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_TRUE);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	889b      	ldrh	r3, [r3, #4]
 80006a6:	2201      	movs	r2, #1
 80006a8:	4619      	mov	r1, r3
 80006aa:	f000 fe5e 	bl	800136a <MCAL_GPIO_WritePin>

		}
		LCD_kick(LCD);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff fee5 	bl	800047e <LCD_kick>
	}
	if(e_LCDCharType == DATA){
 80006b4:	78bb      	ldrb	r3, [r7, #2]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d122      	bne.n	8000700 <LCD_sendchar+0x13e>
		LCD->Ch_Counter ++;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7cdb      	ldrb	r3, [r3, #19]
 80006be:	3301      	adds	r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	74da      	strb	r2, [r3, #19]
			if(LCD->Ch_Counter==LINE_DIGITS)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7cdb      	ldrb	r3, [r3, #19]
 80006ca:	2b10      	cmp	r3, #16
 80006cc:	d105      	bne.n	80006da <LCD_sendchar+0x118>
				LCD_gotoxy(LCD,0,1);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2100      	movs	r1, #0
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f85c 	bl	8000790 <LCD_gotoxy>
			else if (LCD->Ch_Counter==2*LINE_DIGITS)
				LCD_gotoxy(LCD,0,2);
			else if (LCD->Ch_Counter==3*LINE_DIGITS)
				LCD_gotoxy(LCD,0,3);
		}
}
 80006d8:	e012      	b.n	8000700 <LCD_sendchar+0x13e>
			else if (LCD->Ch_Counter==2*LINE_DIGITS)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	7cdb      	ldrb	r3, [r3, #19]
 80006de:	2b20      	cmp	r3, #32
 80006e0:	d105      	bne.n	80006ee <LCD_sendchar+0x12c>
				LCD_gotoxy(LCD,0,2);
 80006e2:	2202      	movs	r2, #2
 80006e4:	2100      	movs	r1, #0
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 f852 	bl	8000790 <LCD_gotoxy>
}
 80006ec:	e008      	b.n	8000700 <LCD_sendchar+0x13e>
			else if (LCD->Ch_Counter==3*LINE_DIGITS)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7cdb      	ldrb	r3, [r3, #19]
 80006f2:	2b30      	cmp	r3, #48	; 0x30
 80006f4:	d104      	bne.n	8000700 <LCD_sendchar+0x13e>
				LCD_gotoxy(LCD,0,3);
 80006f6:	2203      	movs	r2, #3
 80006f8:	2100      	movs	r1, #0
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f848 	bl	8000790 <LCD_gotoxy>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <LCD_sendstring>:
void LCD_sendstring(s_LCD_Config_t  * LCD , const char *  data)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	for(;*data != '\0';data++){
 8000712:	e009      	b.n	8000728 <LCD_sendstring+0x20>
		LCD_sendchar(LCD,*data,DATA);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2201      	movs	r2, #1
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ff50 	bl	80005c2 <LCD_sendchar>
	for(;*data != '\0';data++){
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1f1      	bne.n	8000714 <LCD_sendstring+0xc>
	}
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <LCDIsbusy>:
void LCDIsbusy(s_LCD_Config_t  * LCD)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	//currently I'm working on reading the actual busy flag
	//for the end of the dev process xD let it simply a delay.
	LCD_delay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff fe7f 	bl	8000444 <LCD_delay>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <LCD_clearscreen>:

void LCD_clearscreen(s_LCD_Config_t  * LCD)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
	LCD_sendchar(LCD , ClEAR_SCREEN , COMMAND );
 8000756:	2200      	movs	r2, #0
 8000758:	2101      	movs	r1, #1
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ff31 	bl	80005c2 <LCD_sendchar>
	LCD->Ch_Counter=0;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	74da      	strb	r2, [r3, #19]
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <LCD_returnhome>:
void LCD_returnhome(s_LCD_Config_t  * LCD)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
	LCD_sendchar(LCD , RETURN_HOME , COMMAND );
 8000776:	2200      	movs	r2, #0
 8000778:	2102      	movs	r1, #2
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff ff21 	bl	80005c2 <LCD_sendchar>
	LCD->Ch_Counter=0;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	74da      	strb	r2, [r3, #19]
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <LCD_gotoxy>:
void LCD_gotoxy(s_LCD_Config_t  * LCD , unsigned char x , unsigned char y)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	70fb      	strb	r3, [r7, #3]
 800079c:	4613      	mov	r3, r2
 800079e:	70bb      	strb	r3, [r7, #2]
	uint32_t address;
	switch(y)
 80007a0:	78bb      	ldrb	r3, [r7, #2]
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d819      	bhi.n	80007da <LCD_gotoxy+0x4a>
 80007a6:	a201      	add	r2, pc, #4	; (adr r2, 80007ac <LCD_gotoxy+0x1c>)
 80007a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ac:	080007bd 	.word	0x080007bd
 80007b0:	080007c3 	.word	0x080007c3
 80007b4:	080007cb 	.word	0x080007cb
 80007b8:	080007d3 	.word	0x080007d3
	{
	case 0:
		address = x;
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	60fb      	str	r3, [r7, #12]
		break;
 80007c0:	e00b      	b.n	80007da <LCD_gotoxy+0x4a>
	case 1:
		address = 0x40+x;
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	3340      	adds	r3, #64	; 0x40
 80007c6:	60fb      	str	r3, [r7, #12]
		break;
 80007c8:	e007      	b.n	80007da <LCD_gotoxy+0x4a>
	case 2:
		address = 0x14+x;
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	3314      	adds	r3, #20
 80007ce:	60fb      	str	r3, [r7, #12]
		break;
 80007d0:	e003      	b.n	80007da <LCD_gotoxy+0x4a>
	case 3:
		address = 0x54+x;
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	3354      	adds	r3, #84	; 0x54
 80007d6:	60fb      	str	r3, [r7, #12]
		break;
 80007d8:	bf00      	nop
	}
	LCD->Ch_Counter=y*LINE_DIGITS+x;
 80007da:	78bb      	ldrb	r3, [r7, #2]
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	4413      	add	r3, r2
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	74da      	strb	r2, [r3, #19]
	LCD_sendchar(LCD,SET_DD_ADDRESS+address,COMMAND);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	3b80      	subs	r3, #128	; 0x80
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff fee3 	bl	80005c2 <LCD_sendchar>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <main>:
		 */
};


int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 800080a:	4bab      	ldr	r3, [pc, #684]	; (8000ab8 <main+0x2b4>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4aaa      	ldr	r2, [pc, #680]	; (8000ab8 <main+0x2b4>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000816:	4ba8      	ldr	r3, [pc, #672]	; (8000ab8 <main+0x2b4>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	4aa7      	ldr	r2, [pc, #668]	; (8000ab8 <main+0x2b4>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000822:	4ba5      	ldr	r3, [pc, #660]	; (8000ab8 <main+0x2b4>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4aa4      	ldr	r2, [pc, #656]	; (8000ab8 <main+0x2b4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6193      	str	r3, [r2, #24]
	keypad_Init();
 800082e:	f7ff fc9f 	bl	8000170 <keypad_Init>

	Timer2_init();
 8000832:	f000 fe55 	bl	80014e0 <Timer2_init>
	Servo1_Entry_Gate_Init();
 8000836:	f7ff fd75 	bl	8000324 <Servo1_Entry_Gate_Init>
	Servo2_Exit_Gate_Init();
 800083a:	f7ff fdbb 	bl	80003b4 <Servo2_Exit_Gate_Init>
write your Code

	 */

	USART_Config uartcfg ;
	uartcfg.BaudRate = USART_BaudRate_115200 ;
 800083e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000842:	607b      	str	r3, [r7, #4]
	uartcfg.HW_FlowCtrl = USART_HW_FlowCtrl_NONE ;
 8000844:	2300      	movs	r3, #0
 8000846:	72fb      	strb	r3, [r7, #11]
	uartcfg.IRQ_Enable = USART_IRQ_Enable_RXNE ;
 8000848:	2320      	movs	r3, #32
 800084a:	733b      	strb	r3, [r7, #12]
	uartcfg.P_IRQ_Call_Back = RFID_CARD_Enter_CallBack;
 800084c:	4b9b      	ldr	r3, [pc, #620]	; (8000abc <main+0x2b8>)
 800084e:	613b      	str	r3, [r7, #16]
	uartcfg.Parity = USART_Parity_NONE ;
 8000850:	2300      	movs	r3, #0
 8000852:	727b      	strb	r3, [r7, #9]
	uartcfg.PayLoad_Length = USART_PayLoad_Length_8B ;
 8000854:	2300      	movs	r3, #0
 8000856:	723b      	strb	r3, [r7, #8]
	uartcfg.Stop_Length = USART_StopBits_1 ;
 8000858:	2300      	movs	r3, #0
 800085a:	72bb      	strb	r3, [r7, #10]
	uartcfg.USART_MODE = USART_MODE_TX_RX ;
 800085c:	230c      	movs	r3, #12
 800085e:	703b      	strb	r3, [r7, #0]

	MCAL_UART_Init(USART1,&uartcfg);
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4896      	ldr	r0, [pc, #600]	; (8000ac0 <main+0x2bc>)
 8000866:	f000 ff7b 	bl	8001760 <MCAL_UART_Init>
	 */

	/*
		write your Code
	 */
	uartcfg.BaudRate = USART_BaudRate_115200 ;
 800086a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800086e:	607b      	str	r3, [r7, #4]
	uartcfg.HW_FlowCtrl = USART_HW_FlowCtrl_NONE ;
 8000870:	2300      	movs	r3, #0
 8000872:	72fb      	strb	r3, [r7, #11]
	uartcfg.IRQ_Enable = USART_IRQ_Enable_RXNE ;
 8000874:	2320      	movs	r3, #32
 8000876:	733b      	strb	r3, [r7, #12]
	uartcfg.P_IRQ_Call_Back = RFID_CARD_Enter_CallBack;
 8000878:	4b90      	ldr	r3, [pc, #576]	; (8000abc <main+0x2b8>)
 800087a:	613b      	str	r3, [r7, #16]
	uartcfg.Parity = USART_Parity_NONE ;
 800087c:	2300      	movs	r3, #0
 800087e:	727b      	strb	r3, [r7, #9]
	uartcfg.PayLoad_Length = USART_PayLoad_Length_8B ;
 8000880:	2300      	movs	r3, #0
 8000882:	723b      	strb	r3, [r7, #8]
	uartcfg.Stop_Length = USART_StopBits_1 ;
 8000884:	2300      	movs	r3, #0
 8000886:	72bb      	strb	r3, [r7, #10]
	uartcfg.USART_MODE = USART_MODE_TX_RX ;
 8000888:	230c      	movs	r3, #12
 800088a:	703b      	strb	r3, [r7, #0]

	MCAL_UART_Init(USART2,&uartcfg);
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	488c      	ldr	r0, [pc, #560]	; (8000ac4 <main+0x2c0>)
 8000892:	f000 ff65 	bl	8001760 <MCAL_UART_Init>

	LCD_init(&LCD);
 8000896:	488c      	ldr	r0, [pc, #560]	; (8000ac8 <main+0x2c4>)
 8000898:	f7ff fe0c 	bl	80004b4 <LCD_init>
	LCD_init(&LCD2);
 800089c:	488b      	ldr	r0, [pc, #556]	; (8000acc <main+0x2c8>)
 800089e:	f7ff fe09 	bl	80004b4 <LCD_init>
	LEDs_Init();
 80008a2:	f000 fa01 	bl	8000ca8 <LEDs_Init>
	PIRs_Iint();
 80008a6:	f000 fa1f 	bl	8000ce8 <PIRs_Iint>

	/*==========Enter IDs To Store In Array Pass==========*/
	Store_IDs_From_Admin();
 80008aa:	f000 fa43 	bl	8000d34 <Store_IDs_From_Admin>

	/*Dash Bord LCD*/
	LCD_Welcome();
 80008ae:	f000 f9ab 	bl	8000c08 <LCD_Welcome>
	dms(200);
 80008b2:	20c8      	movs	r0, #200	; 0xc8
 80008b4:	f000 fe50 	bl	8001558 <dms>
	LCD_Display_Empty_Slots();
 80008b8:	f000 f9cc 	bl	8000c54 <LCD_Display_Empty_Slots>


	int i=0;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
	while(1)
	{
		if(Available_Slots>'0')
 80008c0:	4b83      	ldr	r3, [pc, #524]	; (8000ad0 <main+0x2cc>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b30      	cmp	r3, #48	; 0x30
 80008c6:	d912      	bls.n	80008ee <main+0xea>

		{

			LCD_gotoxy(&LCD2, -4, 2);
 80008c8:	2202      	movs	r2, #2
 80008ca:	21fc      	movs	r1, #252	; 0xfc
 80008cc:	487f      	ldr	r0, [pc, #508]	; (8000acc <main+0x2c8>)
 80008ce:	f7ff ff5f 	bl	8000790 <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Put Your Id In");
 80008d2:	4980      	ldr	r1, [pc, #512]	; (8000ad4 <main+0x2d0>)
 80008d4:	487d      	ldr	r0, [pc, #500]	; (8000acc <main+0x2c8>)
 80008d6:	f7ff ff17 	bl	8000708 <LCD_sendstring>
			LCD_gotoxy(&LCD2,-4,3 );
 80008da:	2203      	movs	r2, #3
 80008dc:	21fc      	movs	r1, #252	; 0xfc
 80008de:	487b      	ldr	r0, [pc, #492]	; (8000acc <main+0x2c8>)
 80008e0:	f7ff ff56 	bl	8000790 <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Card Reader");
 80008e4:	497c      	ldr	r1, [pc, #496]	; (8000ad8 <main+0x2d4>)
 80008e6:	4879      	ldr	r0, [pc, #484]	; (8000acc <main+0x2c8>)
 80008e8:	f7ff ff0e 	bl	8000708 <LCD_sendstring>
 80008ec:	e01b      	b.n	8000926 <main+0x122>
		}
		/*======Parking is full so not allow enetr cars=======*/
		else
		{

			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 80008ee:	2200      	movs	r2, #0
 80008f0:	210c      	movs	r1, #12
 80008f2:	4876      	ldr	r0, [pc, #472]	; (8000acc <main+0x2c8>)
 80008f4:	f7ff fe65 	bl	80005c2 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2101      	movs	r1, #1
 80008fc:	4873      	ldr	r0, [pc, #460]	; (8000acc <main+0x2c8>)
 80008fe:	f7ff fe60 	bl	80005c2 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	4871      	ldr	r0, [pc, #452]	; (8000acc <main+0x2c8>)
 8000908:	f7ff ff42 	bl	8000790 <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Parking Is Full");
 800090c:	4973      	ldr	r1, [pc, #460]	; (8000adc <main+0x2d8>)
 800090e:	486f      	ldr	r0, [pc, #444]	; (8000acc <main+0x2c8>)
 8000910:	f7ff fefa 	bl	8000708 <LCD_sendstring>
			LCD_gotoxy(&LCD2, 0, 1);
 8000914:	2201      	movs	r2, #1
 8000916:	2100      	movs	r1, #0
 8000918:	486c      	ldr	r0, [pc, #432]	; (8000acc <main+0x2c8>)
 800091a:	f7ff ff39 	bl	8000790 <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Entry Not Allowed");
 800091e:	4970      	ldr	r1, [pc, #448]	; (8000ae0 <main+0x2dc>)
 8000920:	486a      	ldr	r0, [pc, #424]	; (8000acc <main+0x2c8>)
 8000922:	f7ff fef1 	bl	8000708 <LCD_sendstring>
		}

		//Search about ID in array of Pass
		for(i=0;i<3;i++)
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	e017      	b.n	800095c <main+0x158>
		{
			if(RFID_CARD_Enter == pass[i] || RFID_CARD_EXIT == pass[i] )
 800092c:	4a6d      	ldr	r2, [pc, #436]	; (8000ae4 <main+0x2e0>)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	4413      	add	r3, r2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b29a      	uxth	r2, r3
 8000936:	4b6c      	ldr	r3, [pc, #432]	; (8000ae8 <main+0x2e4>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	429a      	cmp	r2, r3
 800093c:	d008      	beq.n	8000950 <main+0x14c>
 800093e:	4a69      	ldr	r2, [pc, #420]	; (8000ae4 <main+0x2e0>)
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b68      	ldr	r3, [pc, #416]	; (8000aec <main+0x2e8>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	d102      	bne.n	8000956 <main+0x152>
			{
				Search_Done=1;
 8000950:	4b67      	ldr	r3, [pc, #412]	; (8000af0 <main+0x2ec>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
		for(i=0;i<3;i++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	2b02      	cmp	r3, #2
 8000960:	dde4      	ble.n	800092c <main+0x128>
			}

		}
		/*=====================Enter gate=====================*/
		if (Search_Done=1 && Available_Slots>'0' && RFID_CARD_Enter !=0)
 8000962:	4b5b      	ldr	r3, [pc, #364]	; (8000ad0 <main+0x2cc>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b30      	cmp	r3, #48	; 0x30
 8000968:	d905      	bls.n	8000976 <main+0x172>
 800096a:	4b5f      	ldr	r3, [pc, #380]	; (8000ae8 <main+0x2e4>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <main+0x172>
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <main+0x174>
 8000976:	2300      	movs	r3, #0
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b5d      	ldr	r3, [pc, #372]	; (8000af0 <main+0x2ec>)
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	4b5c      	ldr	r3, [pc, #368]	; (8000af0 <main+0x2ec>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d04f      	beq.n	8000a26 <main+0x222>
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 8000986:	2200      	movs	r2, #0
 8000988:	210c      	movs	r1, #12
 800098a:	4850      	ldr	r0, [pc, #320]	; (8000acc <main+0x2c8>)
 800098c:	f7ff fe19 	bl	80005c2 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 8000990:	2200      	movs	r2, #0
 8000992:	2101      	movs	r1, #1
 8000994:	484d      	ldr	r0, [pc, #308]	; (8000acc <main+0x2c8>)
 8000996:	f7ff fe14 	bl	80005c2 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	484b      	ldr	r0, [pc, #300]	; (8000acc <main+0x2c8>)
 80009a0:	f7ff fef6 	bl	8000790 <LCD_gotoxy>
			LCD_sendstring(&LCD2,"ID Is Right");
 80009a4:	4953      	ldr	r1, [pc, #332]	; (8000af4 <main+0x2f0>)
 80009a6:	4849      	ldr	r0, [pc, #292]	; (8000acc <main+0x2c8>)
 80009a8:	f7ff feae 	bl	8000708 <LCD_sendstring>
			LCD_gotoxy(&LCD2, 0, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2100      	movs	r1, #0
 80009b0:	4846      	ldr	r0, [pc, #280]	; (8000acc <main+0x2c8>)
 80009b2:	f7ff feed 	bl	8000790 <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Entry gate Opens");
 80009b6:	4950      	ldr	r1, [pc, #320]	; (8000af8 <main+0x2f4>)
 80009b8:	4844      	ldr	r0, [pc, #272]	; (8000acc <main+0x2c8>)
 80009ba:	f7ff fea5 	bl	8000708 <LCD_sendstring>

			//Green led*/
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c4:	484d      	ldr	r0, [pc, #308]	; (8000afc <main+0x2f8>)
 80009c6:	f000 fcd0 	bl	800136a <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(UP);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff fcc0 	bl	8000350 <Servo1_Entry_Gate>
			Available_Slots--;
 80009d0:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <main+0x2cc>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b3d      	ldr	r3, [pc, #244]	; (8000ad0 <main+0x2cc>)
 80009da:	701a      	strb	r2, [r3, #0]


			RFID_CARD_Enter =0;
 80009dc:	4b42      	ldr	r3, [pc, #264]	; (8000ae8 <main+0x2e4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	801a      	strh	r2, [r3, #0]
			Search_Done =0;
 80009e2:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <main+0x2ec>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]

			dms(300);
 80009e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009ec:	f000 fdb4 	bl	8001558 <dms>
			//wait for car fully enter
			while(MCAL_GPIO_Read_Pin(GPIOA, GPIO_PIN_7)==1) //Read the PIR1 state
 80009f0:	e002      	b.n	80009f8 <main+0x1f4>
			{
				dms(200);
 80009f2:	20c8      	movs	r0, #200	; 0xc8
 80009f4:	f000 fdb0 	bl	8001558 <dms>
			while(MCAL_GPIO_Read_Pin(GPIOA, GPIO_PIN_7)==1) //Read the PIR1 state
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	4840      	ldr	r0, [pc, #256]	; (8000afc <main+0x2f8>)
 80009fc:	f000 fc8d 	bl	800131a <MCAL_GPIO_Read_Pin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d0f5      	beq.n	80009f2 <main+0x1ee>
			}

			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0c:	483b      	ldr	r0, [pc, #236]	; (8000afc <main+0x2f8>)
 8000a0e:	f000 fcac 	bl	800136a <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(Down);
 8000a12:	2002      	movs	r0, #2
 8000a14:	f7ff fc9c 	bl	8000350 <Servo1_Entry_Gate>


			/*Dash Bord LCD*/
			LCD_Welcome();
 8000a18:	f000 f8f6 	bl	8000c08 <LCD_Welcome>
			dms(200);
 8000a1c:	20c8      	movs	r0, #200	; 0xc8
 8000a1e:	f000 fd9b 	bl	8001558 <dms>
			LCD_Display_Empty_Slots();
 8000a22:	f000 f917 	bl	8000c54 <LCD_Display_Empty_Slots>
		}

		/*===================Exit gate====================*/
		if (Search_Done=1 && Available_Slots>'0' && RFID_CARD_EXIT !=0)
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <main+0x2cc>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b30      	cmp	r3, #48	; 0x30
 8000a2c:	d905      	bls.n	8000a3a <main+0x236>
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <main+0x2e8>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <main+0x236>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <main+0x238>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <main+0x2ec>)
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <main+0x2ec>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d076      	beq.n	8000b38 <main+0x334>
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	210c      	movs	r1, #12
 8000a4e:	481f      	ldr	r0, [pc, #124]	; (8000acc <main+0x2c8>)
 8000a50:	f7ff fdb7 	bl	80005c2 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2101      	movs	r1, #1
 8000a58:	481c      	ldr	r0, [pc, #112]	; (8000acc <main+0x2c8>)
 8000a5a:	f7ff fdb2 	bl	80005c2 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	481a      	ldr	r0, [pc, #104]	; (8000acc <main+0x2c8>)
 8000a64:	f7ff fe94 	bl	8000790 <LCD_gotoxy>
			LCD_sendstring(&LCD2,"ID Is Right");
 8000a68:	4922      	ldr	r1, [pc, #136]	; (8000af4 <main+0x2f0>)
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <main+0x2c8>)
 8000a6c:	f7ff fe4c 	bl	8000708 <LCD_sendstring>
			LCD_gotoxy(&LCD2, 0, 1);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2100      	movs	r1, #0
 8000a74:	4815      	ldr	r0, [pc, #84]	; (8000acc <main+0x2c8>)
 8000a76:	f7ff fe8b 	bl	8000790 <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Exit gate Opens");
 8000a7a:	4921      	ldr	r1, [pc, #132]	; (8000b00 <main+0x2fc>)
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <main+0x2c8>)
 8000a7e:	f7ff fe43 	bl	8000708 <LCD_sendstring>

			//Green led*/
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a88:	481c      	ldr	r0, [pc, #112]	; (8000afc <main+0x2f8>)
 8000a8a:	f000 fc6e 	bl	800136a <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(UP);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fca6 	bl	80003e0 <Servo2_Exit_Gate>
			Available_Slots++;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <main+0x2cc>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <main+0x2cc>)
 8000a9e:	701a      	strb	r2, [r3, #0]


			RFID_CARD_EXIT=0;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <main+0x2e8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	801a      	strh	r2, [r3, #0]
			Search_Done =0;
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <main+0x2ec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]

			dms(300);
 8000aac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ab0:	f000 fd52 	bl	8001558 <dms>
			//wait for car fully enter
			while(MCAL_GPIO_Read_Pin(GPIOA, GPIO_PIN_1)==1) //Read the PIR1 state
 8000ab4:	e029      	b.n	8000b0a <main+0x306>
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	08000be5 	.word	0x08000be5
 8000ac0:	40013800 	.word	0x40013800
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	20000018 	.word	0x20000018
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	08001a58 	.word	0x08001a58
 8000ad8:	08001a68 	.word	0x08001a68
 8000adc:	08001a74 	.word	0x08001a74
 8000ae0:	08001a84 	.word	0x08001a84
 8000ae4:	20000048 	.word	0x20000048
 8000ae8:	20000050 	.word	0x20000050
 8000aec:	20000052 	.word	0x20000052
 8000af0:	2000004b 	.word	0x2000004b
 8000af4:	08001a98 	.word	0x08001a98
 8000af8:	08001aa4 	.word	0x08001aa4
 8000afc:	40010800 	.word	0x40010800
 8000b00:	08001ab8 	.word	0x08001ab8
			{
				dms(200);
 8000b04:	20c8      	movs	r0, #200	; 0xc8
 8000b06:	f000 fd27 	bl	8001558 <dms>
			while(MCAL_GPIO_Read_Pin(GPIOA, GPIO_PIN_1)==1) //Read the PIR1 state
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	482e      	ldr	r0, [pc, #184]	; (8000bc8 <main+0x3c4>)
 8000b0e:	f000 fc04 	bl	800131a <MCAL_GPIO_Read_Pin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d0f5      	beq.n	8000b04 <main+0x300>
			}

			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1e:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <main+0x3c4>)
 8000b20:	f000 fc23 	bl	800136a <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(Down);
 8000b24:	2002      	movs	r0, #2
 8000b26:	f7ff fc5b 	bl	80003e0 <Servo2_Exit_Gate>


			LCD_Welcome();
 8000b2a:	f000 f86d 	bl	8000c08 <LCD_Welcome>
			dms(200);
 8000b2e:	20c8      	movs	r0, #200	; 0xc8
 8000b30:	f000 fd12 	bl	8001558 <dms>
			LCD_Display_Empty_Slots();
 8000b34:	f000 f88e 	bl	8000c54 <LCD_Display_Empty_Slots>

		}

		/*==================Wrong Id====================*/
		if(Search_Done == 0 && (RFID_CARD_Enter >0 || RFID_CARD_EXIT>0) )
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <main+0x3c8>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f47f aebf 	bne.w	80008c0 <main+0xbc>
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <main+0x3cc>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d104      	bne.n	8000b54 <main+0x350>
 8000b4a:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <main+0x3d0>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f43f aeb6 	beq.w	80008c0 <main+0xbc>
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 8000b54:	2200      	movs	r2, #0
 8000b56:	210c      	movs	r1, #12
 8000b58:	481f      	ldr	r0, [pc, #124]	; (8000bd8 <main+0x3d4>)
 8000b5a:	f7ff fd32 	bl	80005c2 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2101      	movs	r1, #1
 8000b62:	481d      	ldr	r0, [pc, #116]	; (8000bd8 <main+0x3d4>)
 8000b64:	f7ff fd2d 	bl	80005c2 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	481a      	ldr	r0, [pc, #104]	; (8000bd8 <main+0x3d4>)
 8000b6e:	f7ff fe0f 	bl	8000790 <LCD_gotoxy>
			LCD_sendstring(&LCD2,"ID Is Wrong");
 8000b72:	491a      	ldr	r1, [pc, #104]	; (8000bdc <main+0x3d8>)
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <main+0x3d4>)
 8000b76:	f7ff fdc7 	bl	8000708 <LCD_sendstring>

			//red led*/
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <main+0x3c4>)
 8000b80:	f000 fbf3 	bl	800136a <MCAL_GPIO_WritePin>
			dms(200);
 8000b84:	20c8      	movs	r0, #200	; 0xc8
 8000b86:	f000 fce7 	bl	8001558 <dms>
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <main+0x3c4>)
 8000b90:	f000 fbeb 	bl	800136a <MCAL_GPIO_WritePin>
			LCD_gotoxy(&LCD2, 0, 1);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2100      	movs	r1, #0
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <main+0x3d4>)
 8000b9a:	f7ff fdf9 	bl	8000790 <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Try Again");
 8000b9e:	4910      	ldr	r1, [pc, #64]	; (8000be0 <main+0x3dc>)
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <main+0x3d4>)
 8000ba2:	f7ff fdb1 	bl	8000708 <LCD_sendstring>

			RFID_CARD_EXIT =0;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <main+0x3d0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	801a      	strh	r2, [r3, #0]
			RFID_CARD_Enter =0;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <main+0x3cc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]

			dms(200);
 8000bb2:	20c8      	movs	r0, #200	; 0xc8
 8000bb4:	f000 fcd0 	bl	8001558 <dms>


			LCD_Welcome();
 8000bb8:	f000 f826 	bl	8000c08 <LCD_Welcome>
			dms(200);
 8000bbc:	20c8      	movs	r0, #200	; 0xc8
 8000bbe:	f000 fccb 	bl	8001558 <dms>
			LCD_Display_Empty_Slots();
 8000bc2:	f000 f847 	bl	8000c54 <LCD_Display_Empty_Slots>
		if(Available_Slots>'0')
 8000bc6:	e67b      	b.n	80008c0 <main+0xbc>
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	2000004b 	.word	0x2000004b
 8000bd0:	20000050 	.word	0x20000050
 8000bd4:	20000052 	.word	0x20000052
 8000bd8:	20000018 	.word	0x20000018
 8000bdc:	08001ac8 	.word	0x08001ac8
 8000be0:	08001ad4 	.word	0x08001ad4

08000be4 <RFID_CARD_Enter_CallBack>:
}


/*Call Back For UART*/
void RFID_CARD_Enter_CallBack(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	MCAL_UART_Recieve_Data(USART1, &RFID_CARD_Enter, PollingDisable);
 8000be8:	2201      	movs	r2, #1
 8000bea:	4905      	ldr	r1, [pc, #20]	; (8000c00 <RFID_CARD_Enter_CallBack+0x1c>)
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <RFID_CARD_Enter_CallBack+0x20>)
 8000bee:	f000 feb3 	bl	8001958 <MCAL_UART_Recieve_Data>
	MCAL_UART_Send_Data(USART1, &RFID_CARD_Enter, PollingEnable);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4902      	ldr	r1, [pc, #8]	; (8000c00 <RFID_CARD_Enter_CallBack+0x1c>)
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <RFID_CARD_Enter_CallBack+0x20>)
 8000bf8:	f000 fe92 	bl	8001920 <MCAL_UART_Send_Data>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000050 	.word	0x20000050
 8000c04:	40013800 	.word	0x40013800

08000c08 <LCD_Welcome>:
}



void LCD_Welcome(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	/*Dash Bord LCD*/

	LCD_sendchar(&LCD2, 0x0c, COMMAND);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	210c      	movs	r1, #12
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <LCD_Welcome+0x40>)
 8000c12:	f7ff fcd6 	bl	80005c2 <LCD_sendchar>
	LCD_sendchar(&LCD2, 0x01, COMMAND);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2101      	movs	r1, #1
 8000c1a:	480b      	ldr	r0, [pc, #44]	; (8000c48 <LCD_Welcome+0x40>)
 8000c1c:	f7ff fcd1 	bl	80005c2 <LCD_sendchar>
	LCD_gotoxy(&LCD2, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	4808      	ldr	r0, [pc, #32]	; (8000c48 <LCD_Welcome+0x40>)
 8000c26:	f7ff fdb3 	bl	8000790 <LCD_gotoxy>
	LCD_sendstring(&LCD2,"Welcome in");
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <LCD_Welcome+0x44>)
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <LCD_Welcome+0x40>)
 8000c2e:	f7ff fd6b 	bl	8000708 <LCD_sendstring>
	LCD_gotoxy(&LCD2,0,1 );
 8000c32:	2201      	movs	r2, #1
 8000c34:	2100      	movs	r1, #0
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <LCD_Welcome+0x40>)
 8000c38:	f7ff fdaa 	bl	8000790 <LCD_gotoxy>
	LCD_sendstring(&LCD2,"our Parking");
 8000c3c:	4904      	ldr	r1, [pc, #16]	; (8000c50 <LCD_Welcome+0x48>)
 8000c3e:	4802      	ldr	r0, [pc, #8]	; (8000c48 <LCD_Welcome+0x40>)
 8000c40:	f7ff fd62 	bl	8000708 <LCD_sendstring>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000018 	.word	0x20000018
 8000c4c:	08001ae0 	.word	0x08001ae0
 8000c50:	08001aec 	.word	0x08001aec

08000c54 <LCD_Display_Empty_Slots>:

void LCD_Display_Empty_Slots(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	LCD_sendchar(&LCD2, 0x0c, COMMAND);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	210c      	movs	r1, #12
 8000c5c:	480f      	ldr	r0, [pc, #60]	; (8000c9c <LCD_Display_Empty_Slots+0x48>)
 8000c5e:	f7ff fcb0 	bl	80005c2 <LCD_sendchar>
	LCD_sendchar(&LCD2, 0x01, COMMAND);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2101      	movs	r1, #1
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <LCD_Display_Empty_Slots+0x48>)
 8000c68:	f7ff fcab 	bl	80005c2 <LCD_sendchar>
	LCD_gotoxy(&LCD2, 0, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	480a      	ldr	r0, [pc, #40]	; (8000c9c <LCD_Display_Empty_Slots+0x48>)
 8000c72:	f7ff fd8d 	bl	8000790 <LCD_gotoxy>
	LCD_sendstring(&LCD2,"Empty Slots=");
 8000c76:	490a      	ldr	r1, [pc, #40]	; (8000ca0 <LCD_Display_Empty_Slots+0x4c>)
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <LCD_Display_Empty_Slots+0x48>)
 8000c7a:	f7ff fd45 	bl	8000708 <LCD_sendstring>
	LCD_gotoxy(&LCD2, 13, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	210d      	movs	r1, #13
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <LCD_Display_Empty_Slots+0x48>)
 8000c84:	f7ff fd84 	bl	8000790 <LCD_gotoxy>
	LCD_sendchar(&LCD2,Available_Slots, DATA);
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <LCD_Display_Empty_Slots+0x50>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <LCD_Display_Empty_Slots+0x48>)
 8000c92:	f7ff fc96 	bl	80005c2 <LCD_sendchar>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000018 	.word	0x20000018
 8000ca0:	08001af8 	.word	0x08001af8
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <LEDs_Init>:

void LEDs_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
	//RED LED A0

	GPIO_PIN_Configer_t PinCinfg;
	PinCinfg.GPIO_PinNumber=GPIO_PIN_0;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <LEDs_Init+0x3c>)
 8000cc0:	f000 faaf 	bl	8001222 <MCAL_GPIO_Init>
write your Code
	 */

	//GREEN LED A11

	PinCinfg.GPIO_PinNumber=GPIO_PIN_11;
 8000cc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc8:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <LEDs_Init+0x3c>)
 8000cd8:	f000 faa3 	bl	8001222 <MCAL_GPIO_Init>
	/*
write your Code
	 */
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40010800 	.word	0x40010800

08000ce8 <PIRs_Iint>:

void PIRs_Iint(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
	//PIR1 A7
	GPIO_PIN_Configer_t PinCinfg;
	PinCinfg.GPIO_PinNumber=GPIO_PIN_7;
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <PIRs_Iint+0x48>)
 8000cfc:	f000 fa91 	bl	8001222 <MCAL_GPIO_Init>

	//PIR2 A1
	PinCinfg.GPIO_PinNumber=GPIO_PIN_1;
 8000d00:	2302      	movs	r3, #2
 8000d02:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8000d04:	2302      	movs	r3, #2
 8000d06:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4808      	ldr	r0, [pc, #32]	; (8000d30 <PIRs_Iint+0x48>)
 8000d0e:	f000 fa88 	bl	8001222 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); //make A0 ground
 8000d12:	2201      	movs	r2, #1
 8000d14:	2101      	movs	r1, #1
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <PIRs_Iint+0x48>)
 8000d18:	f000 fb27 	bl	800136a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1); //make A11 ground
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d22:	4803      	ldr	r0, [pc, #12]	; (8000d30 <PIRs_Iint+0x48>)
 8000d24:	f000 fb21 	bl	800136a <MCAL_GPIO_WritePin>

}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40010800 	.word	0x40010800

08000d34 <Store_IDs_From_Admin>:

void Store_IDs_From_Admin(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	/*
write your Code
	 */
	LCD_sendchar(&LCD, 0x0c, COMMAND);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	210c      	movs	r1, #12
 8000d3c:	4863      	ldr	r0, [pc, #396]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000d3e:	f7ff fc40 	bl	80005c2 <LCD_sendchar>
	LCD_gotoxy(&LCD, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	4861      	ldr	r0, [pc, #388]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000d48:	f7ff fd22 	bl	8000790 <LCD_gotoxy>
	LCD_sendstring(&LCD,"Enter Allowed ID");
 8000d4c:	4960      	ldr	r1, [pc, #384]	; (8000ed0 <Store_IDs_From_Admin+0x19c>)
 8000d4e:	485f      	ldr	r0, [pc, #380]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000d50:	f7ff fcda 	bl	8000708 <LCD_sendstring>

	/*First ID*/
	LCD_gotoxy(&LCD, 4, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2104      	movs	r1, #4
 8000d58:	485c      	ldr	r0, [pc, #368]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000d5a:	f7ff fd19 	bl	8000790 <LCD_gotoxy>
	LCD_sendstring(&LCD,"First  ID:");
 8000d5e:	495d      	ldr	r1, [pc, #372]	; (8000ed4 <Store_IDs_From_Admin+0x1a0>)
 8000d60:	485a      	ldr	r0, [pc, #360]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000d62:	f7ff fcd1 	bl	8000708 <LCD_sendstring>
	while(keypad_Read()=='N');
 8000d66:	bf00      	nop
 8000d68:	f7ff fa50 	bl	800020c <keypad_Read>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b4e      	cmp	r3, #78	; 0x4e
 8000d70:	d0fa      	beq.n	8000d68 <Store_IDs_From_Admin+0x34>
	pass[0]=keypad_Read();
 8000d72:	f7ff fa4b 	bl	800020c <keypad_Read>
 8000d76:	4603      	mov	r3, r0
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b57      	ldr	r3, [pc, #348]	; (8000ed8 <Store_IDs_From_Admin+0x1a4>)
 8000d7c:	701a      	strb	r2, [r3, #0]
	while(keypad_Read()!='N');
 8000d7e:	bf00      	nop
 8000d80:	f7ff fa44 	bl	800020c <keypad_Read>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b4e      	cmp	r3, #78	; 0x4e
 8000d88:	d1fa      	bne.n	8000d80 <Store_IDs_From_Admin+0x4c>
	LCD_gotoxy(&LCD,14,1 );
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	210e      	movs	r1, #14
 8000d8e:	484f      	ldr	r0, [pc, #316]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000d90:	f7ff fcfe 	bl	8000790 <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[0], DATA);
 8000d94:	4b50      	ldr	r3, [pc, #320]	; (8000ed8 <Store_IDs_From_Admin+0x1a4>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	484b      	ldr	r0, [pc, #300]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000d9e:	f7ff fc10 	bl	80005c2 <LCD_sendchar>
	LCD_sendchar(&LCD, 0x0c, COMMAND);
 8000da2:	2200      	movs	r2, #0
 8000da4:	210c      	movs	r1, #12
 8000da6:	4849      	ldr	r0, [pc, #292]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000da8:	f7ff fc0b 	bl	80005c2 <LCD_sendchar>

	/*Second ID*/
	LCD_gotoxy(&LCD, 0, 2);
 8000dac:	2202      	movs	r2, #2
 8000dae:	2100      	movs	r1, #0
 8000db0:	4846      	ldr	r0, [pc, #280]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000db2:	f7ff fced 	bl	8000790 <LCD_gotoxy>
	LCD_sendstring(&LCD,"Second ID:");
 8000db6:	4949      	ldr	r1, [pc, #292]	; (8000edc <Store_IDs_From_Admin+0x1a8>)
 8000db8:	4844      	ldr	r0, [pc, #272]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000dba:	f7ff fca5 	bl	8000708 <LCD_sendstring>
	while(keypad_Read()=='N');
 8000dbe:	bf00      	nop
 8000dc0:	f7ff fa24 	bl	800020c <keypad_Read>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b4e      	cmp	r3, #78	; 0x4e
 8000dc8:	d0fa      	beq.n	8000dc0 <Store_IDs_From_Admin+0x8c>
	pass[1]=keypad_Read();
 8000dca:	f7ff fa1f 	bl	800020c <keypad_Read>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b41      	ldr	r3, [pc, #260]	; (8000ed8 <Store_IDs_From_Admin+0x1a4>)
 8000dd4:	705a      	strb	r2, [r3, #1]
	while(keypad_Read()!='N');
 8000dd6:	bf00      	nop
 8000dd8:	f7ff fa18 	bl	800020c <keypad_Read>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b4e      	cmp	r3, #78	; 0x4e
 8000de0:	d1fa      	bne.n	8000dd8 <Store_IDs_From_Admin+0xa4>
	LCD_gotoxy(&LCD, 10,2);
 8000de2:	2202      	movs	r2, #2
 8000de4:	210a      	movs	r1, #10
 8000de6:	4839      	ldr	r0, [pc, #228]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000de8:	f7ff fcd2 	bl	8000790 <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[1], DATA);
 8000dec:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <Store_IDs_From_Admin+0x1a4>)
 8000dee:	785b      	ldrb	r3, [r3, #1]
 8000df0:	2201      	movs	r2, #1
 8000df2:	4619      	mov	r1, r3
 8000df4:	4835      	ldr	r0, [pc, #212]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000df6:	f7ff fbe4 	bl	80005c2 <LCD_sendchar>
	LCD_sendchar(&LCD, 0x0c, COMMAND);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	210c      	movs	r1, #12
 8000dfe:	4833      	ldr	r0, [pc, #204]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e00:	f7ff fbdf 	bl	80005c2 <LCD_sendchar>

	/*Therd ID*/
	LCD_gotoxy(&LCD, 0, 3);
 8000e04:	2203      	movs	r2, #3
 8000e06:	2100      	movs	r1, #0
 8000e08:	4830      	ldr	r0, [pc, #192]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e0a:	f7ff fcc1 	bl	8000790 <LCD_gotoxy>
	LCD_sendstring(&LCD,"Therd  ID:");
 8000e0e:	4934      	ldr	r1, [pc, #208]	; (8000ee0 <Store_IDs_From_Admin+0x1ac>)
 8000e10:	482e      	ldr	r0, [pc, #184]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e12:	f7ff fc79 	bl	8000708 <LCD_sendstring>
	while(keypad_Read()=='N');
 8000e16:	bf00      	nop
 8000e18:	f7ff f9f8 	bl	800020c <keypad_Read>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b4e      	cmp	r3, #78	; 0x4e
 8000e20:	d0fa      	beq.n	8000e18 <Store_IDs_From_Admin+0xe4>
	pass[2]=keypad_Read();
 8000e22:	f7ff f9f3 	bl	800020c <keypad_Read>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <Store_IDs_From_Admin+0x1a4>)
 8000e2c:	709a      	strb	r2, [r3, #2]
	while(keypad_Read()!='N');
 8000e2e:	bf00      	nop
 8000e30:	f7ff f9ec 	bl	800020c <keypad_Read>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b4e      	cmp	r3, #78	; 0x4e
 8000e38:	d1fa      	bne.n	8000e30 <Store_IDs_From_Admin+0xfc>
	LCD_gotoxy(&LCD, 10,3 );
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	210a      	movs	r1, #10
 8000e3e:	4823      	ldr	r0, [pc, #140]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e40:	f7ff fca6 	bl	8000790 <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[2], DATA);
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <Store_IDs_From_Admin+0x1a4>)
 8000e46:	789b      	ldrb	r3, [r3, #2]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481f      	ldr	r0, [pc, #124]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e4e:	f7ff fbb8 	bl	80005c2 <LCD_sendchar>
	LCD_sendchar(&LCD, 0x0c, COMMAND);
 8000e52:	2200      	movs	r2, #0
 8000e54:	210c      	movs	r1, #12
 8000e56:	481d      	ldr	r0, [pc, #116]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e58:	f7ff fbb3 	bl	80005c2 <LCD_sendchar>

	/*Saved*/
	LCD_clearscreen(&LCD);
 8000e5c:	481b      	ldr	r0, [pc, #108]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e5e:	f7ff fc76 	bl	800074e <LCD_clearscreen>
	LCD_gotoxy(&LCD, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	4819      	ldr	r0, [pc, #100]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e68:	f7ff fc92 	bl	8000790 <LCD_gotoxy>
	LCD_sendstring(&LCD,"IDs are Saved");
 8000e6c:	491d      	ldr	r1, [pc, #116]	; (8000ee4 <Store_IDs_From_Admin+0x1b0>)
 8000e6e:	4817      	ldr	r0, [pc, #92]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e70:	f7ff fc4a 	bl	8000708 <LCD_sendstring>
	LCD_sendchar(&LCD, 0x0c, COMMAND);
 8000e74:	2200      	movs	r2, #0
 8000e76:	210c      	movs	r1, #12
 8000e78:	4814      	ldr	r0, [pc, #80]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e7a:	f7ff fba2 	bl	80005c2 <LCD_sendchar>

	LCD_gotoxy(&LCD, 0, 1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2100      	movs	r1, #0
 8000e82:	4812      	ldr	r0, [pc, #72]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e84:	f7ff fc84 	bl	8000790 <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[0], DATA);
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <Store_IDs_From_Admin+0x1a4>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480e      	ldr	r0, [pc, #56]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e92:	f7ff fb96 	bl	80005c2 <LCD_sendchar>
	LCD_gotoxy(&LCD, 2, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2102      	movs	r1, #2
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000e9c:	f7ff fc78 	bl	8000790 <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[1], DATA);
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <Store_IDs_From_Admin+0x1a4>)
 8000ea2:	785b      	ldrb	r3, [r3, #1]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000eaa:	f7ff fb8a 	bl	80005c2 <LCD_sendchar>
	LCD_gotoxy(&LCD, 4, 1);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000eb4:	f7ff fc6c 	bl	8000790 <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[2], DATA);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <Store_IDs_From_Admin+0x1a4>)
 8000eba:	789b      	ldrb	r3, [r3, #2]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <Store_IDs_From_Admin+0x198>)
 8000ec2:	f7ff fb7e 	bl	80005c2 <LCD_sendchar>


}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	08001b08 	.word	0x08001b08
 8000ed4:	08001b1c 	.word	0x08001b1c
 8000ed8:	20000048 	.word	0x20000048
 8000edc:	08001b28 	.word	0x08001b28
 8000ee0:	08001b34 	.word	0x08001b34
 8000ee4:	08001b40 	.word	0x08001b40

08000ee8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eea:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	; (8000f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <LoopForever+0xe>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <LoopForever+0x16>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f16:	f000 fd6f 	bl	80019f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f1a:	f7ff fc73 	bl	8000804 <main>

08000f1e <LoopForever>:

LoopForever:
    b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
  ldr   r0, =_estack
 8000f20:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000f2c:	08001b70 	.word	0x08001b70
  ldr r2, =_sbss
 8000f30:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000f34:	20000098 	.word	0x20000098

08000f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_2_IRQHandler>
	...

08000f3c <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <EXTI0_IRQHandler+0x1c>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <EXTI0_IRQHandler+0x1c>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALLBACK[0]();
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <EXTI0_IRQHandler+0x20>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4798      	blx	r3
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40010400 	.word	0x40010400
 8000f5c:	20000054 	.word	0x20000054

08000f60 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <EXTI1_IRQHandler+0x1c>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <EXTI1_IRQHandler+0x1c>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALLBACK[1]();
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <EXTI1_IRQHandler+0x20>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4798      	blx	r3
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40010400 	.word	0x40010400
 8000f80:	20000054 	.word	0x20000054

08000f84 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <EXTI2_IRQHandler+0x1c>)
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <EXTI2_IRQHandler+0x1c>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALLBACK[2]();
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <EXTI2_IRQHandler+0x20>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4798      	blx	r3
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40010400 	.word	0x40010400
 8000fa4:	20000054 	.word	0x20000054

08000fa8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <EXTI3_IRQHandler+0x1c>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <EXTI3_IRQHandler+0x1c>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALLBACK[3]();
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <EXTI3_IRQHandler+0x20>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	4798      	blx	r3
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40010400 	.word	0x40010400
 8000fc8:	20000054 	.word	0x20000054

08000fcc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <EXTI4_IRQHandler+0x1c>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <EXTI4_IRQHandler+0x1c>)
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALLBACK[4]();
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <EXTI4_IRQHandler+0x20>)
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	4798      	blx	r3
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40010400 	.word	0x40010400
 8000fec:	20000054 	.word	0x20000054

08000ff0 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALLBACK[5]() ; }
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	f003 0320 	and.w	r3, r3, #32
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d008      	beq.n	8001012 <EXTI9_5_IRQHandler+0x22>
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	4a22      	ldr	r2, [pc, #136]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 8001006:	f043 0320 	orr.w	r3, r3, #32
 800100a:	6153      	str	r3, [r2, #20]
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <EXTI9_5_IRQHandler+0xa4>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALLBACK[6]() ; }
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101a:	2b00      	cmp	r3, #0
 800101c:	d008      	beq.n	8001030 <EXTI9_5_IRQHandler+0x40>
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 8001024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001028:	6153      	str	r3, [r2, #20]
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <EXTI9_5_IRQHandler+0xa4>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALLBACK[7]() ; }
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001038:	2b00      	cmp	r3, #0
 800103a:	d008      	beq.n	800104e <EXTI9_5_IRQHandler+0x5e>
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	4a13      	ldr	r2, [pc, #76]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 8001042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001046:	6153      	str	r3, [r2, #20]
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <EXTI9_5_IRQHandler+0xa4>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALLBACK[8]() ; }
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d008      	beq.n	800106c <EXTI9_5_IRQHandler+0x7c>
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <EXTI9_5_IRQHandler+0xa4>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALLBACK[9]() ; }
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001074:	2b00      	cmp	r3, #0
 8001076:	d008      	beq.n	800108a <EXTI9_5_IRQHandler+0x9a>
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <EXTI9_5_IRQHandler+0xa0>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6153      	str	r3, [r2, #20]
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <EXTI9_5_IRQHandler+0xa4>)
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	4798      	blx	r3
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40010400 	.word	0x40010400
 8001094:	20000054 	.word	0x20000054

08001098 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALLBACK[10]() ; }
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <EXTI15_10_IRQHandler+0x22>
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	4a29      	ldr	r2, [pc, #164]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 80010ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b2:	6153      	str	r3, [r2, #20]
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <EXTI15_10_IRQHandler+0xc0>)
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALLBACK[11]() ; }
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d008      	beq.n	80010d8 <EXTI15_10_IRQHandler+0x40>
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a22      	ldr	r2, [pc, #136]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 80010cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <EXTI15_10_IRQHandler+0xc0>)
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALLBACK[12]() ; }
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <EXTI15_10_IRQHandler+0x5e>
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 80010ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ee:	6153      	str	r3, [r2, #20]
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <EXTI15_10_IRQHandler+0xc0>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALLBACK[13]() ; }
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d008      	beq.n	8001114 <EXTI15_10_IRQHandler+0x7c>
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 8001108:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800110c:	6153      	str	r3, [r2, #20]
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <EXTI15_10_IRQHandler+0xc0>)
 8001110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001112:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALLBACK[14]() ; }
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d008      	beq.n	8001132 <EXTI15_10_IRQHandler+0x9a>
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 8001126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112a:	6153      	str	r3, [r2, #20]
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <EXTI15_10_IRQHandler+0xc0>)
 800112e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001130:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALLBACK[15]() ; }
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d008      	beq.n	8001150 <EXTI15_10_IRQHandler+0xb8>
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <EXTI15_10_IRQHandler+0xbc>)
 8001144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b03      	ldr	r3, [pc, #12]	; (8001158 <EXTI15_10_IRQHandler+0xc0>)
 800114c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114e:	4798      	blx	r3
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40010400 	.word	0x40010400
 8001158:	20000054 	.word	0x20000054

0800115c <Get_CRLH_Position>:
 */

#include"Stm32_F103C6_Gpio_driver.h"
//based on pin number get the position at the register (CRL || CRH ) to write its modes
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	2b80      	cmp	r3, #128	; 0x80
 800116a:	d042      	beq.n	80011f2 <Get_CRLH_Position+0x96>
 800116c:	2b80      	cmp	r3, #128	; 0x80
 800116e:	dc11      	bgt.n	8001194 <Get_CRLH_Position+0x38>
 8001170:	2b08      	cmp	r3, #8
 8001172:	d036      	beq.n	80011e2 <Get_CRLH_Position+0x86>
 8001174:	2b08      	cmp	r3, #8
 8001176:	dc06      	bgt.n	8001186 <Get_CRLH_Position+0x2a>
 8001178:	2b02      	cmp	r3, #2
 800117a:	d02e      	beq.n	80011da <Get_CRLH_Position+0x7e>
 800117c:	2b04      	cmp	r3, #4
 800117e:	d02e      	beq.n	80011de <Get_CRLH_Position+0x82>
 8001180:	2b01      	cmp	r3, #1
 8001182:	d028      	beq.n	80011d6 <Get_CRLH_Position+0x7a>
 8001184:	e047      	b.n	8001216 <Get_CRLH_Position+0xba>
 8001186:	2b20      	cmp	r3, #32
 8001188:	d02f      	beq.n	80011ea <Get_CRLH_Position+0x8e>
 800118a:	2b40      	cmp	r3, #64	; 0x40
 800118c:	d02f      	beq.n	80011ee <Get_CRLH_Position+0x92>
 800118e:	2b10      	cmp	r3, #16
 8001190:	d029      	beq.n	80011e6 <Get_CRLH_Position+0x8a>
 8001192:	e040      	b.n	8001216 <Get_CRLH_Position+0xba>
 8001194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001198:	d033      	beq.n	8001202 <Get_CRLH_Position+0xa6>
 800119a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800119e:	dc09      	bgt.n	80011b4 <Get_CRLH_Position+0x58>
 80011a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a4:	d029      	beq.n	80011fa <Get_CRLH_Position+0x9e>
 80011a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011aa:	d028      	beq.n	80011fe <Get_CRLH_Position+0xa2>
 80011ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b0:	d021      	beq.n	80011f6 <Get_CRLH_Position+0x9a>
 80011b2:	e030      	b.n	8001216 <Get_CRLH_Position+0xba>
 80011b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011b8:	d027      	beq.n	800120a <Get_CRLH_Position+0xae>
 80011ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011be:	dc03      	bgt.n	80011c8 <Get_CRLH_Position+0x6c>
 80011c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011c4:	d01f      	beq.n	8001206 <Get_CRLH_Position+0xaa>
 80011c6:	e026      	b.n	8001216 <Get_CRLH_Position+0xba>
 80011c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011cc:	d01f      	beq.n	800120e <Get_CRLH_Position+0xb2>
 80011ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011d2:	d01e      	beq.n	8001212 <Get_CRLH_Position+0xb6>
 80011d4:	e01f      	b.n	8001216 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e01e      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 80011da:	2304      	movs	r3, #4
 80011dc:	e01c      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 80011de:	2308      	movs	r3, #8
 80011e0:	e01a      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 80011e2:	230c      	movs	r3, #12
 80011e4:	e018      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 80011e6:	2310      	movs	r3, #16
 80011e8:	e016      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 80011ea:	2314      	movs	r3, #20
 80011ec:	e014      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 80011ee:	2318      	movs	r3, #24
 80011f0:	e012      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 80011f2:	231c      	movs	r3, #28
 80011f4:	e010      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e00e      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 80011fa:	2304      	movs	r3, #4
 80011fc:	e00c      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 80011fe:	2308      	movs	r3, #8
 8001200:	e00a      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8001202:	230c      	movs	r3, #12
 8001204:	e008      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 8001206:	2310      	movs	r3, #16
 8001208:	e006      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 800120a:	2314      	movs	r3, #20
 800120c:	e004      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 800120e:	2318      	movs	r3, #24
 8001210:	e002      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8001212:	231c      	movs	r3, #28
 8001214:	e000      	b.n	8001218 <Get_CRLH_Position+0xbc>
		break;
	default:
		return 0;
 8001216:	2300      	movs	r3, #0
		break;

	}
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr

08001222 <MCAL_GPIO_Init>:
 * note -                   -stmf103c6 MCU has GPIO A,B,C,D,E Modules
 *                           but LQFP48 Package has only GPIO A,B, Part of C/D exported external pins
 */
/**================================================================= */
void MCAL_GPIO_Init (GPIO_Typedef* GPIOX ,GPIO_PIN_Configer_t* PinConfig)
{
 8001222:	b590      	push	{r4, r7, lr}
 8001224:	b085      	sub	sp, #20
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
	//To Init Any Pins Must Write On Port configuration register low (GPIOx_CRL) 0>>>7
	//Or register low (GPIOx_CRH) 8>>>15
	//We Determine The Position Should Write On It In  configuration register By Determine First Position Pin from "Get_CRLH_Position" function

	volatile uint32_t *ConfigureRegister = NULL;
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
	uint8_t   ConfigurePin=0;     //In This Variable We Store The Configure Pin
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
	ConfigureRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ; // to take the address of CRL or CRH and store it in ConfigureRegister
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	2bff      	cmp	r3, #255	; 0xff
 800123a:	d801      	bhi.n	8001240 <MCAL_GPIO_Init+0x1e>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	e001      	b.n	8001244 <MCAL_GPIO_Init+0x22>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3304      	adds	r3, #4
 8001244:	60bb      	str	r3, [r7, #8]

	//Clear CNF & MODE for this pin only (0xf = 1111)
	*(ConfigureRegister) &= ~(0xf<<Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff86 	bl	800115c <Get_CRLH_Position>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	230f      	movs	r3, #15
 8001256:	4093      	lsls	r3, r2
 8001258:	43da      	mvns	r2, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	401a      	ands	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	601a      	str	r2, [r3, #0]
	if (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_MODE ==GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_PP || PinConfig->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_OD)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	789b      	ldrb	r3, [r3, #2]
 8001268:	2b04      	cmp	r3, #4
 800126a:	d00b      	beq.n	8001284 <MCAL_GPIO_Init+0x62>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	789b      	ldrb	r3, [r3, #2]
 8001270:	2b05      	cmp	r3, #5
 8001272:	d007      	beq.n	8001284 <MCAL_GPIO_Init+0x62>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	789b      	ldrb	r3, [r3, #2]
 8001278:	2b06      	cmp	r3, #6
 800127a:	d003      	beq.n	8001284 <MCAL_GPIO_Init+0x62>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	789b      	ldrb	r3, [r3, #2]
 8001280:	2b07      	cmp	r3, #7
 8001282:	d10e      	bne.n	80012a2 <MCAL_GPIO_Init+0x80>
		{

			//I sure The User Want Make The Pin As Output & in Case Output Should Configure Mode(Speed) & CNF(State)
			ConfigurePin = ((( (PinConfig->GPIO_MODE - 4)<<2) |(PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f); //Shift 2 to Set The CNF Bits
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	789b      	ldrb	r3, [r3, #2]
 8001288:	3b04      	subs	r3, #4
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	b25a      	sxtb	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	78db      	ldrb	r3, [r3, #3]
 8001292:	b25b      	sxtb	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b25b      	sxtb	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e029      	b.n	80012f6 <MCAL_GPIO_Init+0xd4>

		}

	else  //I sure The User Want Make The Pin As Input & in Case input Should Configure Mode(Speed)=00 & CNF(State)
		{
			if (PinConfig->GPIO_MODE == GPIO_MODE_Analog ||PinConfig->GPIO_MODE ==GPIO_MODE_INPUT_FLO ||  PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	789b      	ldrb	r3, [r3, #2]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <MCAL_GPIO_Init+0x98>
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	789b      	ldrb	r3, [r3, #2]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d003      	beq.n	80012ba <MCAL_GPIO_Init+0x98>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	789b      	ldrb	r3, [r3, #2]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d107      	bne.n	80012ca <MCAL_GPIO_Init+0xa8>
			{
				ConfigurePin= (( ((PinConfig->GPIO_MODE )<<2) | 0x0) & 0x0f);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	789b      	ldrb	r3, [r3, #2]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e015      	b.n	80012f6 <MCAL_GPIO_Init+0xd4>
			}
			else  //PullUp Or PullDown
			{
				ConfigurePin= (( ((GPIO_MODE_INPUT_PU)<<2) | 0x0) & 0x0f);
 80012ca:	2308      	movs	r3, #8
 80012cc:	73fb      	strb	r3, [r7, #15]
				if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d107      	bne.n	80012e6 <MCAL_GPIO_Init+0xc4>
				{
					GPIOX->ODR |= PinConfig->GPIO_PinNumber;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	8812      	ldrh	r2, [r2, #0]
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	e007      	b.n	80012f6 <MCAL_GPIO_Init+0xd4>
				}
				else
				{
					GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	8812      	ldrh	r2, [r2, #0]
 80012ee:	43d2      	mvns	r2, r2
 80012f0:	401a      	ands	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60da      	str	r2, [r3, #12]
				}
			}
		}
	//Write On CRH Or CLH
	*(ConfigureRegister) |=( ConfigurePin << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80012f6:	7bfc      	ldrb	r4, [r7, #15]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff2d 	bl	800115c <Get_CRLH_Position>
 8001302:	4603      	mov	r3, r0
 8001304:	fa04 f203 	lsl.w	r2, r4, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	431a      	orrs	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	601a      	str	r2, [r3, #0]

}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}

0800131a <MCAL_GPIO_Read_Pin>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
uint8_t MCAL_GPIO_Read_Pin(GPIO_Typedef * GPIOx,uint16_t PinNumber)
{
 800131a:	b480      	push	{r7}
 800131c:	b085      	sub	sp, #20
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	807b      	strh	r3, [r7, #2]
	uint8_t PinState =0;
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
	if( (GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_FALSE )      //(GPIOx->IDR & PinNumber) :to get the value from IDR for this pin
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <MCAL_GPIO_Read_Pin+0x22>
	{
		PinState = GPIO_PIN_TRUE;
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e001      	b.n	8001340 <MCAL_GPIO_Read_Pin+0x26>
	}
	else
	{
		PinState = GPIO_PIN_FALSE;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]
	}
	return PinState;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <MCAL_GPIO_ReadPort>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
uint16_t MCAL_GPIO_ReadPort(GPIO_Typedef * GPIOx)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	uint16_t PortState =0 ;
 8001354:	2300      	movs	r3, #0
 8001356:	81fb      	strh	r3, [r7, #14]
	PortState = (uint16_t)GPIOx->IDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	81fb      	strh	r3, [r7, #14]
	return PortState;
 800135e:	89fb      	ldrh	r3, [r7, #14]

}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <MCAL_GPIO_WritePin>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_WritePin(GPIO_Typedef * GPIOx,uint16_t PinNumber,uint8_t Value)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	807b      	strh	r3, [r7, #2]
 8001376:	4613      	mov	r3, r2
 8001378:	707b      	strb	r3, [r7, #1]
	if (Value !=(uint32_t)GPIO_PIN_FALSE )
 800137a:	787b      	ldrb	r3, [r7, #1]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <MCAL_GPIO_WritePin+0x24>
	{
		GPIOx->ODR |= (uint32_t)PinNumber ;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	60da      	str	r2, [r3, #12]
	else
	{
		GPIOx->ODR &= ~(uint32_t)PinNumber;
	}

}
 800138c:	e006      	b.n	800139c <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &= ~(uint32_t)PinNumber;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	60da      	str	r2, [r3, #12]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <MCAL_GPIO_WritePort>:
 * @retval -                -none
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_WritePort(GPIO_Typedef * GPIOx,uint16_t Value)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t) Value ;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	60da      	str	r2, [r3, #12]

}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <MCAL_GPIO_WriteGroup>:
 * @retval -                -none
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_WriteGroup(GPIO_Typedef * GPIOx,uint16_t Value,uint16_t Mask)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	807b      	strh	r3, [r7, #2]
 80013ce:	4613      	mov	r3, r2
 80013d0:	803b      	strh	r3, [r7, #0]
	GPIOx->ODR &= ~(Mask);				// clear the group
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	883a      	ldrh	r2, [r7, #0]
 80013d8:	43d2      	mvns	r2, r2
 80013da:	401a      	ands	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	60da      	str	r2, [r3, #12]
	GPIOx->ODR |= (Value & Mask);		// put the new value
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	8879      	ldrh	r1, [r7, #2]
 80013e6:	883a      	ldrh	r2, [r7, #0]
 80013e8:	400a      	ands	r2, r1
 80013ea:	b292      	uxth	r2, r2
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60da      	str	r2, [r3, #12]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <I2C1_EV_IRQHandler>:
	return result;
}


void I2C1_EV_IRQHandler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <MCAL_RCC_GetSys_freq>:
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512*/
const uint8_t AHBPreSctable [16U]= {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};
uint32_t MCAL_RCC_GetSys_freq(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
		System is enabled).
		00: HSI selected as system clock
		01: HSE selected as system clock
		10: PLL selected as system clock
		11: not allowed*/
	switch ((RCC->CFGR>>2) & 0b11)
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <MCAL_RCC_GetSys_freq+0x30>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d006      	beq.n	800144c <MCAL_RCC_GetSys_freq+0x20>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d302      	bcc.n	8001448 <MCAL_RCC_GetSys_freq+0x1c>
 8001442:	2b02      	cmp	r3, #2
 8001444:	d004      	beq.n	8001450 <MCAL_RCC_GetSys_freq+0x24>
 8001446:	e005      	b.n	8001454 <MCAL_RCC_GetSys_freq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <MCAL_RCC_GetSys_freq+0x34>)
 800144a:	e003      	b.n	8001454 <MCAL_RCC_GetSys_freq+0x28>
		break;
	case 1 :
		return HSE_CLK;  //need to be calculated again
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <MCAL_RCC_GetSys_freq+0x38>)
 800144e:	e001      	b.n	8001454 <MCAL_RCC_GetSys_freq+0x28>
		break;
	case 2 :
		return 16000000; //need to be calculated again
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <MCAL_RCC_GetSys_freq+0x38>)
 8001452:	e7ff      	b.n	8001454 <MCAL_RCC_GetSys_freq+0x28>
		break;
	}


}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000
 8001460:	007a1200 	.word	0x007a1200
 8001464:	00f42400 	.word	0x00f42400

08001468 <MCAL_RCC_GetHCLK_freq>:
uint32_t MCAL_RCC_GetHCLK_freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
		1100: SYSCLK divided by 64
		1101: SYSCLK divided by 128
		1110: SYSCLK divided by 256
		1111: SYSCLK divided by 512*/
	//bit 4: 7 of cfgr give me the prescaler of the hcl (ahb prescaler)
	 return (MCAL_RCC_GetSys_freq()>>AHBPreSctable[(RCC->CFGR>>4) & 0xf] );
 800146c:	f7ff ffde 	bl	800142c <MCAL_RCC_GetSys_freq>
 8001470:	4601      	mov	r1, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <MCAL_RCC_GetHCLK_freq+0x20>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	4a03      	ldr	r2, [pc, #12]	; (800148c <MCAL_RCC_GetHCLK_freq+0x24>)
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000
 800148c:	08001b58 	.word	0x08001b58

08001490 <MCAL_RCC_GetPCLK1_freq>:
uint32_t MCAL_RCC_GetPCLK1_freq(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/
	//bit 8 : 10 of cfgr give me the prescaler of the clock1
	 return (MCAL_RCC_GetHCLK_freq()>>APBPreSctable[(RCC->CFGR>>8) & 0b111] );
 8001494:	f7ff ffe8 	bl	8001468 <MCAL_RCC_GetHCLK_freq>
 8001498:	4601      	mov	r1, r0
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <MCAL_RCC_GetPCLK1_freq+0x20>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <MCAL_RCC_GetPCLK1_freq+0x24>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	08001b50 	.word	0x08001b50

080014b8 <MCAL_RCC_GetPCLK2_freq>:
uint32_t MCAL_RCC_GetPCLK2_freq(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/
	//bit 11 :13  of cfgr give me the prescaler of the clock2
	 return (MCAL_RCC_GetHCLK_freq()>>APBPreSctable[(RCC->CFGR>>11) & 0b111] );
 80014bc:	f7ff ffd4 	bl	8001468 <MCAL_RCC_GetHCLK_freq>
 80014c0:	4601      	mov	r1, r0
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <MCAL_RCC_GetPCLK2_freq+0x20>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	0adb      	lsrs	r3, r3, #11
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <MCAL_RCC_GetPCLK2_freq+0x24>)
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08001b50 	.word	0x08001b50

080014e0 <Timer2_init>:
#include "Stm32_F103C6_Time_driver.h"



void Timer2_init(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <Timer2_init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <Timer2_init+0x40>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <Timer2_init+0x44>)
 80014f2:	2207      	movs	r2, #7
 80014f4:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05s
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <Timer2_init+0x48>)
 80014f8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80014fc:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 80014fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 800150e:	bf00      	nop
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <Timer2_init+0x4c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0fb      	beq.n	8001510 <Timer2_init+0x30>
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	4002101c 	.word	0x4002101c
 8001524:	40000028 	.word	0x40000028
 8001528:	4000002c 	.word	0x4000002c
 800152c:	40000010 	.word	0x40000010

08001530 <dus>:

void dus(int us)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <dus+0x24>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 800153e:	bf00      	nop
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <dus+0x24>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3fa      	bcc.n	8001540 <dus+0x10>
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	40000024 	.word	0x40000024

08001558 <dms>:

void dms(int ms)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	int i=0;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e006      	b.n	8001578 <dms+0x20>
	{
		dus(1000);
 800156a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800156e:	f7ff ffdf 	bl	8001530 <dus>
	for(i=0;i<ms;i++)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3301      	adds	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf4      	blt.n	800156a <dms+0x12>
	}
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <MCAL_UART_GPIO_Set_Pins>:
 * note -                   -none
 */
/**================================================================= */

void MCAL_UART_GPIO_Set_Pins(USART_Typedef * USARTx)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

	GPIO_PIN_Configer_t PinCfg;

	if(USARTx == USART1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a6d      	ldr	r2, [pc, #436]	; (8001748 <MCAL_UART_GPIO_Set_Pins+0x1c0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d145      	bne.n	8001624 <MCAL_UART_GPIO_Set_Pins+0x9c>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//TX PIN
		PinCfg.GPIO_PinNumber =GPIO_PIN_9 ;
 8001598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 800159e:	2306      	movs	r3, #6
 80015a0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	4867      	ldr	r0, [pc, #412]	; (800174c <MCAL_UART_GPIO_Set_Pins+0x1c4>)
 80015ae:	f7ff fe38 	bl	8001222 <MCAL_GPIO_Init>

		//RX PIN
		PinCfg.GPIO_PinNumber =GPIO_PIN_10 ;
 80015b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT ;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4619      	mov	r1, r3
 80015c2:	4862      	ldr	r0, [pc, #392]	; (800174c <MCAL_UART_GPIO_Set_Pins+0x1c4>)
 80015c4:	f7ff fe2d 	bl	8001222 <MCAL_GPIO_Init>

		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 80015c8:	4b61      	ldr	r3, [pc, #388]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	7adb      	ldrb	r3, [r3, #11]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <MCAL_UART_GPIO_Set_Pins+0x54>
 80015d2:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	7adb      	ldrb	r3, [r3, #11]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10a      	bne.n	80015f2 <MCAL_UART_GPIO_Set_Pins+0x6a>

		{
			//CTX PIN
			PinCfg.GPIO_PinNumber =GPIO_PIN_11 ;
 80015dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015e0:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 80015e2:	2301      	movs	r3, #1
 80015e4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	4619      	mov	r1, r3
 80015ec:	4857      	ldr	r0, [pc, #348]	; (800174c <MCAL_UART_GPIO_Set_Pins+0x1c4>)
 80015ee:	f7ff fe18 	bl	8001222 <MCAL_GPIO_Init>
		}

		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_RTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 80015f2:	4b57      	ldr	r3, [pc, #348]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	7adb      	ldrb	r3, [r3, #11]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <MCAL_UART_GPIO_Set_Pins+0x80>
 80015fc:	4b54      	ldr	r3, [pc, #336]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	7adb      	ldrb	r3, [r3, #11]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 809b 	bne.w	800173e <MCAL_UART_GPIO_Set_Pins+0x1b6>

		{
		//RTX PIN
		PinCfg.GPIO_PinNumber =GPIO_PIN_12 ;
 8001608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 800160e:	2306      	movs	r3, #6
 8001610:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 8001612:	2301      	movs	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	4619      	mov	r1, r3
 800161c:	484b      	ldr	r0, [pc, #300]	; (800174c <MCAL_UART_GPIO_Set_Pins+0x1c4>)
 800161e:	f7ff fe00 	bl	8001222 <MCAL_GPIO_Init>
		MCAL_GPIO_Init(GPIOB, &PinCfg);
		}

	}

}
 8001622:	e08c      	b.n	800173e <MCAL_UART_GPIO_Set_Pins+0x1b6>
	else if(USARTx == USART2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <MCAL_UART_GPIO_Set_Pins+0x1cc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d140      	bne.n	80016ae <MCAL_UART_GPIO_Set_Pins+0x126>
		PinCfg.GPIO_PinNumber =GPIO_PIN_2 ;
 800162c:	2304      	movs	r3, #4
 800162e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8001630:	2306      	movs	r3, #6
 8001632:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	4843      	ldr	r0, [pc, #268]	; (800174c <MCAL_UART_GPIO_Set_Pins+0x1c4>)
 8001640:	f7ff fdef 	bl	8001222 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber =GPIO_PIN_3 ;
 8001644:	2308      	movs	r3, #8
 8001646:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT ;
 8001648:	2301      	movs	r3, #1
 800164a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	483e      	ldr	r0, [pc, #248]	; (800174c <MCAL_UART_GPIO_Set_Pins+0x1c4>)
 8001654:	f7ff fde5 	bl	8001222 <MCAL_GPIO_Init>
		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 8001658:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	7adb      	ldrb	r3, [r3, #11]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <MCAL_UART_GPIO_Set_Pins+0xe4>
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	7adb      	ldrb	r3, [r3, #11]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <MCAL_UART_GPIO_Set_Pins+0xf8>
			PinCfg.GPIO_PinNumber =GPIO_PIN_0 ;
 800166c:	2301      	movs	r3, #1
 800166e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8001670:	2301      	movs	r3, #1
 8001672:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	4619      	mov	r1, r3
 800167a:	4834      	ldr	r0, [pc, #208]	; (800174c <MCAL_UART_GPIO_Set_Pins+0x1c4>)
 800167c:	f7ff fdd1 	bl	8001222 <MCAL_GPIO_Init>
		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_RTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 8001680:	4b33      	ldr	r3, [pc, #204]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	7adb      	ldrb	r3, [r3, #11]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d004      	beq.n	8001694 <MCAL_UART_GPIO_Set_Pins+0x10c>
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	7adb      	ldrb	r3, [r3, #11]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d154      	bne.n	800173e <MCAL_UART_GPIO_Set_Pins+0x1b6>
		PinCfg.GPIO_PinNumber =GPIO_PIN_1 ;
 8001694:	2302      	movs	r3, #2
 8001696:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8001698:	2306      	movs	r3, #6
 800169a:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	4829      	ldr	r0, [pc, #164]	; (800174c <MCAL_UART_GPIO_Set_Pins+0x1c4>)
 80016a8:	f7ff fdbb 	bl	8001222 <MCAL_GPIO_Init>
}
 80016ac:	e047      	b.n	800173e <MCAL_UART_GPIO_Set_Pins+0x1b6>
	else if(USARTx == USART3)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a29      	ldr	r2, [pc, #164]	; (8001758 <MCAL_UART_GPIO_Set_Pins+0x1d0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d143      	bne.n	800173e <MCAL_UART_GPIO_Set_Pins+0x1b6>
		PinCfg.GPIO_PinNumber =GPIO_PIN_10 ;
 80016b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ba:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 80016bc:	2306      	movs	r3, #6
 80016be:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4619      	mov	r1, r3
 80016ca:	4824      	ldr	r0, [pc, #144]	; (800175c <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 80016cc:	f7ff fda9 	bl	8001222 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber =GPIO_PIN_11 ;
 80016d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT ;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4619      	mov	r1, r3
 80016e0:	481e      	ldr	r0, [pc, #120]	; (800175c <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 80016e2:	f7ff fd9e 	bl	8001222 <MCAL_GPIO_Init>
		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	7adb      	ldrb	r3, [r3, #11]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <MCAL_UART_GPIO_Set_Pins+0x172>
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	7adb      	ldrb	r3, [r3, #11]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10a      	bne.n	8001710 <MCAL_UART_GPIO_Set_Pins+0x188>
			PinCfg.GPIO_PinNumber =GPIO_PIN_13 ;
 80016fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fe:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8001700:	2301      	movs	r3, #1
 8001702:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4619      	mov	r1, r3
 800170a:	4814      	ldr	r0, [pc, #80]	; (800175c <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 800170c:	f7ff fd89 	bl	8001222 <MCAL_GPIO_Init>
		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_RTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	7adb      	ldrb	r3, [r3, #11]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <MCAL_UART_GPIO_Set_Pins+0x19c>
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <MCAL_UART_GPIO_Set_Pins+0x1c8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	7adb      	ldrb	r3, [r3, #11]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10c      	bne.n	800173e <MCAL_UART_GPIO_Set_Pins+0x1b6>
		PinCfg.GPIO_PinNumber =GPIO_PIN_14 ;
 8001724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001728:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 800172a:	2306      	movs	r3, #6
 800172c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	4808      	ldr	r0, [pc, #32]	; (800175c <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 800173a:	f7ff fd72 	bl	8001222 <MCAL_GPIO_Init>
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40013800 	.word	0x40013800
 800174c:	40010800 	.word	0x40010800
 8001750:	2000004c 	.word	0x2000004c
 8001754:	40004400 	.word	0x40004400
 8001758:	40004800 	.word	0x40004800
 800175c:	40010c00 	.word	0x40010c00

08001760 <MCAL_UART_Init>:
 *
 */
/**================================================================= */

void MCAL_UART_Init(USART_Typedef * USARTx ,USART_Config * USART_Config)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]

	GP_USART_Config = USART_Config ;
 800176a:	4a64      	ldr	r2, [pc, #400]	; (80018fc <MCAL_UART_Init+0x19c>)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6013      	str	r3, [r2, #0]

	//Enable Clock For Given USART Peripheral
	if (USARTx == USART1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a63      	ldr	r2, [pc, #396]	; (8001900 <MCAL_UART_Init+0x1a0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d106      	bne.n	8001786 <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8001778:	4b62      	ldr	r3, [pc, #392]	; (8001904 <MCAL_UART_Init+0x1a4>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a61      	ldr	r2, [pc, #388]	; (8001904 <MCAL_UART_Init+0x1a4>)
 800177e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	e014      	b.n	80017b0 <MCAL_UART_Init+0x50>
	}
	else if (USARTx == USART2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a5f      	ldr	r2, [pc, #380]	; (8001908 <MCAL_UART_Init+0x1a8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d106      	bne.n	800179c <MCAL_UART_Init+0x3c>
	{
		RCC_USART2_CLK_EN();
 800178e:	4b5d      	ldr	r3, [pc, #372]	; (8001904 <MCAL_UART_Init+0x1a4>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a5c      	ldr	r2, [pc, #368]	; (8001904 <MCAL_UART_Init+0x1a4>)
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	e009      	b.n	80017b0 <MCAL_UART_Init+0x50>
	}
	else if (USARTx == USART3)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a5b      	ldr	r2, [pc, #364]	; (800190c <MCAL_UART_Init+0x1ac>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d105      	bne.n	80017b0 <MCAL_UART_Init+0x50>
	{
		RCC_USART3_CLK_EN();
 80017a4:	4b57      	ldr	r3, [pc, #348]	; (8001904 <MCAL_UART_Init+0x1a4>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	4a56      	ldr	r2, [pc, #344]	; (8001904 <MCAL_UART_Init+0x1a4>)
 80017aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ae:	61d3      	str	r3, [r2, #28]
	}


	//Enable UART Module Bit 13 UE: USART enable
	USARTx->CR1 |=(1<<13);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	60da      	str	r2, [r3, #12]

	//Enable TX RX according to the USART_MODE configuration item
	USARTx->CR1 |= USART_Config->USART_MODE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	7812      	ldrb	r2, [r2, #0]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60da      	str	r2, [r3, #12]

	//PayLoad Length
	USARTx->CR1 |= USART_Config->PayLoad_Length;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	7a12      	ldrb	r2, [r2, #8]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	60da      	str	r2, [r3, #12]

	//BaudRate
	USARTx->CR1 |= USART_Config->BaudRate;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60da      	str	r2, [r3, #12]

	//Parity
	USARTx->CR1 |= USART_Config->Parity ;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	7a52      	ldrb	r2, [r2, #9]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	60da      	str	r2, [r3, #12]

	//Stop_Length
	USARTx->CR1 |= USART_Config->Stop_Length ;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	7a92      	ldrb	r2, [r2, #10]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60da      	str	r2, [r3, #12]


	//HW_FlowCtrl
	USARTx->CR1 |= USART_Config->HW_FlowCtrl ;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	7ad2      	ldrb	r2, [r2, #11]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	60da      	str	r2, [r3, #12]


	//IRQ_Enable
	USARTx->CR1 |= USART_Config->IRQ_Enable ;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	7b12      	ldrb	r2, [r2, #12]
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	60da      	str	r2, [r3, #12]


	/*Configuration of BRR(BaudRate Register)*/
	//PCLK1 for USART2,3
	//PCLK2 for USART1
	if (USARTx == USART1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a37      	ldr	r2, [pc, #220]	; (8001900 <MCAL_UART_Init+0x1a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d105      	bne.n	8001832 <MCAL_UART_Init+0xd2>
	{
		PCLK = MCAL_RCC_GetPCLK2_freq();
 8001826:	f7ff fe47 	bl	80014b8 <MCAL_RCC_GetPCLK2_freq>
 800182a:	4602      	mov	r2, r0
 800182c:	4b38      	ldr	r3, [pc, #224]	; (8001910 <MCAL_UART_Init+0x1b0>)
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	e004      	b.n	800183c <MCAL_UART_Init+0xdc>
	}
	else
	{
		PCLK = MCAL_RCC_GetPCLK1_freq();
 8001832:	f7ff fe2d 	bl	8001490 <MCAL_RCC_GetPCLK1_freq>
 8001836:	4602      	mov	r2, r0
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <MCAL_UART_Init+0x1b0>)
 800183a:	601a      	str	r2, [r3, #0]
	}


	BRR = USART_BRR_REGISTER(PCLK,USART_Config->BaudRate);
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <MCAL_UART_Init+0x1b0>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	0119      	lsls	r1, r3, #4
 800184c:	4b30      	ldr	r3, [pc, #192]	; (8001910 <MCAL_UART_Init+0x1b0>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	009a      	lsls	r2, r3, #2
 8001858:	441a      	add	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fbb2 f2f3 	udiv	r2, r2, r3
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <MCAL_UART_Init+0x1b0>)
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001872:	2064      	movs	r0, #100	; 0x64
 8001874:	fb00 f303 	mul.w	r3, r0, r3
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	4a25      	ldr	r2, [pc, #148]	; (8001914 <MCAL_UART_Init+0x1b4>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	430b      	orrs	r3, r1
 800188a:	4a23      	ldr	r2, [pc, #140]	; (8001918 <MCAL_UART_Init+0x1b8>)
 800188c:	6013      	str	r3, [r2, #0]
	USARTx->BRR = BRR ;
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MCAL_UART_Init+0x1b8>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
	/*Enable/Disable interrupt*/
	//USART_CR1
	if( USART_Config->IRQ_Enable != USART_IRQ_Enable_NONE ) //this mean user enable interrupt
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	7b1b      	ldrb	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d026      	beq.n	80018ec <MCAL_UART_Init+0x18c>
	{
		USARTx->CR1 |= USART_Config->IRQ_Enable;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	7b12      	ldrb	r2, [r2, #12]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]
		//Enable interrupt for NVIC for USARTx IRQ
		if(USARTx == USART1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a14      	ldr	r2, [pc, #80]	; (8001900 <MCAL_UART_Init+0x1a0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d106      	bne.n	80018c2 <MCAL_UART_Init+0x162>
		{
			NVIC_IRQ37_USART1_ENABLE();
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <MCAL_UART_Init+0x1bc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <MCAL_UART_Init+0x1bc>)
 80018ba:	f043 0320 	orr.w	r3, r3, #32
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	e014      	b.n	80018ec <MCAL_UART_Init+0x18c>

		}
		else if(USARTx == USART2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <MCAL_UART_Init+0x1a8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d106      	bne.n	80018d8 <MCAL_UART_Init+0x178>
		{
			NVIC_IRQ38_USART2_ENABLE();
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MCAL_UART_Init+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a13      	ldr	r2, [pc, #76]	; (800191c <MCAL_UART_Init+0x1bc>)
 80018d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e009      	b.n	80018ec <MCAL_UART_Init+0x18c>
		}
		else if(USARTx == USART3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a0c      	ldr	r2, [pc, #48]	; (800190c <MCAL_UART_Init+0x1ac>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d105      	bne.n	80018ec <MCAL_UART_Init+0x18c>
		{
			NVIC_IRQ39_USART3_ENABLE();
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MCAL_UART_Init+0x1bc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <MCAL_UART_Init+0x1bc>)
 80018e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ea:	6013      	str	r3, [r2, #0]
		}

	}
	MCAL_UART_GPIO_Set_Pins( USARTx);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fe4b 	bl	8001588 <MCAL_UART_GPIO_Set_Pins>

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000004c 	.word	0x2000004c
 8001900:	40013800 	.word	0x40013800
 8001904:	40021000 	.word	0x40021000
 8001908:	40004400 	.word	0x40004400
 800190c:	40004800 	.word	0x40004800
 8001910:	20000090 	.word	0x20000090
 8001914:	51eb851f 	.word	0x51eb851f
 8001918:	20000094 	.word	0x20000094
 800191c:	e000e104 	.word	0xe000e104

08001920 <MCAL_UART_Send_Data>:
 *
 */
/**================================================================= */

void MCAL_UART_Send_Data(USART_Typedef * USARTx , uint16_t* pTXBuffer ,enum PollingMechism PollingEn)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	4613      	mov	r3, r2
 800192c:	71fb      	strb	r3, [r7, #7]
	//Wait until TXE flag is set in SR
	if(PollingEn == PollingEnable)
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d106      	bne.n	8001942 <MCAL_UART_Send_Data+0x22>
		while(! (USARTx->SR & (1<<7)) );
 8001934:	bf00      	nop
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f9      	beq.n	8001936 <MCAL_UART_Send_Data+0x16>
	{
		USARTx->DR = (*pTXBuffer & (uint16_t)0x01FF) ;
	}
	else
	{
		USARTx->DR = (*pTXBuffer & (uint8_t)0xFF) ;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	605a      	str	r2, [r3, #4]
	}

}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
	...

08001958 <MCAL_UART_Recieve_Data>:
 * note -                   -none
 *
 */
/**================================================================= */
void MCAL_UART_Recieve_Data(USART_Typedef * USARTx , uint16_t* pTXBuffer ,enum PollingMechism PollingEn)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	4613      	mov	r3, r2
 8001964:	71fb      	strb	r3, [r7, #7]

	//Wait until RXE flag is set in SR
	if(PollingEn == PollingEnable)
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d106      	bne.n	800197a <MCAL_UART_Recieve_Data+0x22>
		while(! (USARTx->SR & (1<<5)) );
 800196c:	bf00      	nop
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f9      	beq.n	800196e <MCAL_UART_Recieve_Data+0x16>
			*((uint16_t*) pTXBuffer ) = (USARTx->DR & (uint8_t)0xFF) ;
		}


	}
	else if (GP_USART_Config->PayLoad_Length == USART_PayLoad_Length_8B)
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MCAL_UART_Recieve_Data+0x60>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	7a1b      	ldrb	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d114      	bne.n	80019ae <MCAL_UART_Recieve_Data+0x56>
	{
		if (GP_USART_Config->Parity == USART_Parity_NONE)
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MCAL_UART_Recieve_Data+0x60>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	7a5b      	ldrb	r3, [r3, #9]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <MCAL_UART_Recieve_Data+0x46>
		{
			*((uint16_t*)pTXBuffer ) =(USARTx->DR & (uint8_t)0xFF) ;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	b29b      	uxth	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	b29a      	uxth	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	801a      	strh	r2, [r3, #0]
			*((uint16_t*) pTXBuffer ) = (USARTx->DR & (uint8_t)0x7F) ;
		}

	}

}
 800199c:	e007      	b.n	80019ae <MCAL_UART_Recieve_Data+0x56>
			*((uint16_t*) pTXBuffer ) = (USARTx->DR & (uint8_t)0x7F) ;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	801a      	strh	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	2000004c 	.word	0x2000004c

080019bc <USART1_IRQHandler>:
	while(! (USARTx->SR & (1<<6)) );
}


void USART1_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	GP_USART_Config->P_IRQ_Call_Back();
 80019c0:	4b02      	ldr	r3, [pc, #8]	; (80019cc <USART1_IRQHandler+0x10>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	4798      	blx	r3
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000004c 	.word	0x2000004c

080019d0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	GP_USART_Config->P_IRQ_Call_Back();
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <USART2_IRQHandler+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	4798      	blx	r3
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000004c 	.word	0x2000004c

080019e4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	GP_USART_Config->P_IRQ_Call_Back();
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <USART3_IRQHandler+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	4798      	blx	r3
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000004c 	.word	0x2000004c

080019f8 <__libc_init_array>:
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	2500      	movs	r5, #0
 80019fc:	4e0c      	ldr	r6, [pc, #48]	; (8001a30 <__libc_init_array+0x38>)
 80019fe:	4c0d      	ldr	r4, [pc, #52]	; (8001a34 <__libc_init_array+0x3c>)
 8001a00:	1ba4      	subs	r4, r4, r6
 8001a02:	10a4      	asrs	r4, r4, #2
 8001a04:	42a5      	cmp	r5, r4
 8001a06:	d109      	bne.n	8001a1c <__libc_init_array+0x24>
 8001a08:	f000 f81a 	bl	8001a40 <_init>
 8001a0c:	2500      	movs	r5, #0
 8001a0e:	4e0a      	ldr	r6, [pc, #40]	; (8001a38 <__libc_init_array+0x40>)
 8001a10:	4c0a      	ldr	r4, [pc, #40]	; (8001a3c <__libc_init_array+0x44>)
 8001a12:	1ba4      	subs	r4, r4, r6
 8001a14:	10a4      	asrs	r4, r4, #2
 8001a16:	42a5      	cmp	r5, r4
 8001a18:	d105      	bne.n	8001a26 <__libc_init_array+0x2e>
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
 8001a1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a20:	4798      	blx	r3
 8001a22:	3501      	adds	r5, #1
 8001a24:	e7ee      	b.n	8001a04 <__libc_init_array+0xc>
 8001a26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a2a:	4798      	blx	r3
 8001a2c:	3501      	adds	r5, #1
 8001a2e:	e7f2      	b.n	8001a16 <__libc_init_array+0x1e>
 8001a30:	08001b68 	.word	0x08001b68
 8001a34:	08001b68 	.word	0x08001b68
 8001a38:	08001b68 	.word	0x08001b68
 8001a3c:	08001b6c 	.word	0x08001b6c

08001a40 <_init>:
 8001a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a42:	bf00      	nop
 8001a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a46:	bc08      	pop	{r3}
 8001a48:	469e      	mov	lr, r3
 8001a4a:	4770      	bx	lr

08001a4c <_fini>:
 8001a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4e:	bf00      	nop
 8001a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a52:	bc08      	pop	{r3}
 8001a54:	469e      	mov	lr, r3
 8001a56:	4770      	bx	lr
